

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Thu Jun 02 20:53:28 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23  0000                     
    24                           ; Version 2.40
    25                           ; Generated 17/11/2021 GMT
    26                           ; 
    27                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution. Publication is not required when
    41                           ;        this file is used in an embedded application.
    42                           ; 
    43                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    44                           ;        software without specific prior written permission.
    45                           ; 
    46                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    47                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    48                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    49                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    50                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    51                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    52                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    53                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    54                           ; 
    55                           ; 
    56                           ; Code-generator required, PIC18F4520 Definitions
    57                           ; 
    58                           ; SFR Addresses
    59  0000                     
    60                           	psect	nvCOMRAM
    61  000018                     __pnvCOMRAM:
    62                           	callstack 0
    63  000018                     _current_state:
    64                           	callstack 0
    65  000018                     	ds	1
    66  0000                     _INT0IF	set	32657
    67  0000                     _INT1IF	set	32640
    68  0000                     _GIE	set	32663
    69  0000                     _INTEDG1	set	32653
    70  0000                     _PORTE	set	3972
    71  0000                     _PORTD	set	3971
    72  0000                     _PORTC	set	3970
    73  0000                     _PORTB	set	3969
    74  0000                     _LATA	set	3977
    75  0000                     _PORTA	set	3968
    76  0000                     _LATE	set	3981
    77  0000                     _LATD	set	3980
    78  0000                     _LATC	set	3979
    79  0000                     _LATB	set	3978
    80  0000                     _TRISA	set	3986
    81  0000                     _ADCON1	set	4033
    82  0000                     _INT1IE	set	32643
    83  0000                     _INTEDG0	set	32654
    84  0000                     _TRISE	set	3990
    85  0000                     _TRISD	set	3989
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISB	set	3987
    88  0000                     _INT0IE	set	32660
    89                           
    90                           ; #config settings
    91                           
    92                           	psect	cinit
    93  00038A                     __pcinit:
    94                           	callstack 0
    95  00038A                     start_initialization:
    96                           	callstack 0
    97  00038A                     __initialization:
    98                           	callstack 0
    99                           
   100                           ; Clear objects allocated to COMRAM (12 bytes)
   101  00038A  EE00  F001         	lfsr	0,__pbssCOMRAM
   102  00038E  0E0C               	movlw	12
   103  000390                     clear_0:
   104  000390  6AEE               	clrf	postinc0,c
   105  000392  06E8               	decf	wreg,f,c
   106  000394  E1FD               	bnz	clear_0
   107  000396                     end_of_initialization:
   108                           	callstack 0
   109  000396                     __end_of__initialization:
   110                           	callstack 0
   111  000396  9019               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   112  000398  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   113  00039A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   114  00039C  6EF8               	movwf	tblptru,c
   115  00039E  0100               	movlb	0
   116  0003A0  EF59  F001         	goto	_main	;jump to C main() function
   117                           
   118                           	psect	bssCOMRAM
   119  000001                     __pbssCOMRAM:
   120                           	callstack 0
   121  000001                     _var_Max_Count:
   122                           	callstack 0
   123  000001                     	ds	2
   124  000003                     _var_Counter_mod64k:
   125                           	callstack 0
   126  000003                     	ds	2
   127  000005                     _var_PC:
   128                           	callstack 0
   129  000005                     	ds	2
   130  000007                     _var_TC_flag:
   131                           	callstack 0
   132  000007                     	ds	1
   133  000008                     _var_CD_flag:
   134                           	callstack 0
   135  000008                     	ds	1
   136  000009                     _var_TRG_flag:
   137                           	callstack 0
   138  000009                     	ds	1
   139  00000A                     _var_CLK_flag:
   140                           	callstack 0
   141  00000A                     	ds	1
   142  00000B                     _var_ETP:
   143                           	callstack 0
   144  00000B                     	ds	1
   145  00000C                     _var_Timer_out:
   146                           	callstack 0
   147  00000C                     	ds	1
   148                           
   149                           	psect	cstackCOMRAM
   150  00000D                     __pcstackCOMRAM:
   151                           	callstack 0
   152  00000D                     ??_write_outputs:
   153  00000D                     ??_read_inputs:
   154  00000D                     
   155                           ; 1 bytes @ 0x0
   156  00000D                     	ds	1
   157  00000E                     write_outputs@var_Buff1:
   158                           	callstack 0
   159                           
   160                           ; 1 bytes @ 0x1
   161  00000E                     	ds	1
   162  00000F                     read_inputs@var_Buff1:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x2
   166  00000F                     	ds	2
   167  000011                     read_inputs@var_Buff2:
   168                           	callstack 0
   169                           
   170                           ; 2 bytes @ 0x4
   171  000011                     	ds	2
   172  000013                     read_inputs@var_Buff4:
   173                           	callstack 0
   174                           
   175                           ; 2 bytes @ 0x6
   176  000013                     	ds	2
   177  000015                     read_inputs@var_Buff3:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0x8
   181  000015                     	ds	2
   182  000017                     state_logic@error:
   183                           	callstack 0
   184  000017                     output_logic@error:
   185                           	callstack 0
   186                           
   187                           ; 1 bytes @ 0xA
   188  000017                     	ds	1
   189  000018                     
   190                           ; 1 bytes @ 0xB
   191 ;;
   192 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   193 ;;
   194 ;; *************** function _main *****************
   195 ;; Defined at:
   196 ;;		line 120 in file "Prog_Timer.c"
   197 ;; Parameters:    Size  Location     Type
   198 ;;		None
   199 ;; Auto vars:     Size  Location     Type
   200 ;;		None
   201 ;; Return value:  Size  Location     Type
   202 ;;                  1    wreg      void 
   203 ;; Registers used:
   204 ;;		wreg, status,2, status,0, cstack
   205 ;; Tracked objects:
   206 ;;		On entry : 0/0
   207 ;;		On exit  : 0/0
   208 ;;		Unchanged: 0/0
   209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   210 ;;      Params:         0       0       0       0       0       0       0
   211 ;;      Locals:         0       0       0       0       0       0       0
   212 ;;      Temps:          0       0       0       0       0       0       0
   213 ;;      Totals:         0       0       0       0       0       0       0
   214 ;;Total ram usage:        0 bytes
   215 ;; Hardware stack levels required when called: 3
   216 ;; This function calls:
   217 ;;		_init_system
   218 ;;		_output_logic
   219 ;;		_state_logic
   220 ;;		_write_outputs
   221 ;; This function is called by:
   222 ;;		Startup code after reset
   223 ;; This function uses a non-reentrant model
   224 ;;
   225                           
   226                           	psect	text0
   227  0002B2                     __ptext0:
   228                           	callstack 0
   229  0002B2                     _main:
   230                           	callstack 28
   231  0002B2                     
   232                           ;Prog_Timer.c: 122: init_system();
   233  0002B2  EC28  F001         	call	_init_system	;wreg free
   234  0002B6                     l1005:
   235                           
   236                           ;Prog_Timer.c: 124: {;Prog_Timer.c: 125: if (state_logic())
   237  0002B6  EC74  F000         	call	_state_logic	;wreg free
   238  0002BA  0900               	iorlw	0
   239  0002BC  B4D8               	btfsc	status,2,c
   240  0002BE  EF63  F001         	goto	u71
   241  0002C2  EF65  F001         	goto	u70
   242  0002C6                     u71:
   243  0002C6  EF67  F001         	goto	l1009
   244  0002CA                     u70:
   245  0002CA  EF77  F001         	goto	l90
   246  0002CE                     l1009:
   247                           
   248                           ;Prog_Timer.c: 127: if (output_logic())
   249  0002CE  EC09  F000         	call	_output_logic	;wreg free
   250  0002D2  0900               	iorlw	0
   251  0002D4  B4D8               	btfsc	status,2,c
   252  0002D6  EF6F  F001         	goto	u81
   253  0002DA  EF71  F001         	goto	u80
   254  0002DE                     u81:
   255  0002DE  EF73  F001         	goto	l1013
   256  0002E2                     u80:
   257  0002E2  EF77  F001         	goto	l90
   258  0002E6                     l1013:
   259                           
   260                           ;Prog_Timer.c: 129: write_outputs();
   261  0002E6  ECB1  F001         	call	_write_outputs	;wreg free
   262  0002EA  EF5B  F001         	goto	l1005
   263  0002EE                     l90:
   264                           
   265                           ;Prog_Timer.c: 132: {;Prog_Timer.c: 133: __nop();
   266  0002EE  F000               	nop	
   267  0002F0  EF77  F001         	goto	l90
   268  0002F4  EF07  F000         	goto	start
   269  0002F8                     __end_of_main:
   270                           	callstack 0
   271                           
   272 ;; *************** function _write_outputs *****************
   273 ;; Defined at:
   274 ;;		line 485 in file "Prog_Timer.c"
   275 ;; Parameters:    Size  Location     Type
   276 ;;		None
   277 ;; Auto vars:     Size  Location     Type
   278 ;;  var_Buff1       1    1[COMRAM] unsigned char 
   279 ;; Return value:  Size  Location     Type
   280 ;;                  1    wreg      void 
   281 ;; Registers used:
   282 ;;		wreg, status,2, status,0
   283 ;; Tracked objects:
   284 ;;		On entry : 0/0
   285 ;;		On exit  : 0/0
   286 ;;		Unchanged: 0/0
   287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   288 ;;      Params:         0       0       0       0       0       0       0
   289 ;;      Locals:         1       0       0       0       0       0       0
   290 ;;      Temps:          1       0       0       0       0       0       0
   291 ;;      Totals:         2       0       0       0       0       0       0
   292 ;;Total ram usage:        2 bytes
   293 ;; Hardware stack levels used: 1
   294 ;; Hardware stack levels required when called: 1
   295 ;; This function calls:
   296 ;;		Nothing
   297 ;; This function is called by:
   298 ;;		_main
   299 ;; This function uses a non-reentrant model
   300 ;;
   301                           
   302                           	psect	text1
   303  000362                     __ptext1:
   304                           	callstack 0
   305  000362                     _write_outputs:
   306                           	callstack 29
   307  000362                     
   308                           ;Prog_Timer.c: 487: char var_Buff1;;Prog_Timer.c: 490: var_Buff1 = PORTB & 0b11110011;
   309  000362  5081               	movf	129,w,c	;volatile
   310  000364  0BF3               	andlw	243
   311  000366  6E0E               	movwf	write_outputs@var_Buff1^0,c
   312                           
   313                           ;Prog_Timer.c: 493: var_Buff1 = var_Buff1 | (var_Timer_out << 2) | (var_ETP << 3);
   314  000368  C00B  F00D         	movff	_var_ETP,??_write_outputs
   315  00036C  90D8               	bcf	status,0,c
   316  00036E  360D               	rlcf	??_write_outputs^0,f,c
   317  000370  90D8               	bcf	status,0,c
   318  000372  360D               	rlcf	??_write_outputs^0,f,c
   319  000374  90D8               	bcf	status,0,c
   320  000376  360D               	rlcf	??_write_outputs^0,f,c
   321  000378  440C               	rlncf	_var_Timer_out^0,w,c
   322  00037A  46E8               	rlncf	wreg,f,c
   323  00037C  0BFC               	andlw	252
   324  00037E  100D               	iorwf	??_write_outputs^0,w,c
   325  000380  100E               	iorwf	write_outputs@var_Buff1^0,w,c
   326  000382  6E0E               	movwf	write_outputs@var_Buff1^0,c
   327  000384                     
   328                           ;Prog_Timer.c: 494: PORTB = var_Buff1;
   329  000384  C00E  FF81         	movff	write_outputs@var_Buff1,3969	;volatile
   330  000388  0012               	return		;funcret
   331  00038A                     __end_of_write_outputs:
   332                           	callstack 0
   333                           
   334 ;; *************** function _state_logic *****************
   335 ;; Defined at:
   336 ;;		line 303 in file "Prog_Timer.c"
   337 ;; Parameters:    Size  Location     Type
   338 ;;		None
   339 ;; Auto vars:     Size  Location     Type
   340 ;;  error           1   10[COMRAM] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  1    wreg      unsigned char 
   343 ;; Registers used:
   344 ;;		wreg, status,2, status,0, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   350 ;;      Params:         0       0       0       0       0       0       0
   351 ;;      Locals:         1       0       0       0       0       0       0
   352 ;;      Temps:          0       0       0       0       0       0       0
   353 ;;      Totals:         1       0       0       0       0       0       0
   354 ;;Total ram usage:        1 bytes
   355 ;; Hardware stack levels used: 1
   356 ;; Hardware stack levels required when called: 2
   357 ;; This function calls:
   358 ;;		_read_inputs
   359 ;; This function is called by:
   360 ;;		_main
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364                           	psect	text2
   365  0000E8                     __ptext2:
   366                           	callstack 0
   367  0000E8                     _state_logic:
   368                           	callstack 28
   369  0000E8                     
   370                           ;Prog_Timer.c: 306: char error = 0;
   371  0000E8  0E00               	movlw	0
   372  0000EA  6E17               	movwf	state_logic@error^0,c
   373  0000EC                     
   374                           ;Prog_Timer.c: 308: read_inputs();
   375  0000EC  ECD5  F000         	call	_read_inputs	;wreg free
   376  0000F0                     
   377                           ;Prog_Timer.c: 310: if (var_CLK_flag == 1)
   378  0000F0  040A               	decf	_var_CLK_flag^0,w,c
   379  0000F2  A4D8               	btfss	status,2,c
   380  0000F4  EF7E  F000         	goto	u31
   381  0000F8  EF80  F000         	goto	u30
   382  0000FC                     u31:
   383  0000FC  EFD3  F000         	goto	l99
   384  000100                     u30:
   385  000100  EFB6  F000         	goto	l955
   386  000104                     l933:
   387                           
   388                           ;Prog_Timer.c: 315: if (var_TRG_flag == 1)
   389  000104  0409               	decf	_var_TRG_flag^0,w,c
   390  000106  A4D8               	btfss	status,2,c
   391  000108  EF88  F000         	goto	u41
   392  00010C  EF8A  F000         	goto	u40
   393  000110                     u41:
   394  000110  EFD1  F000         	goto	l957
   395  000114                     u40:
   396  000114                     
   397                           ;Prog_Timer.c: 316: current_state = 'B';
   398  000114  0E42               	movlw	66
   399  000116  6E18               	movwf	_current_state^0,c
   400  000118  EFD1  F000         	goto	l957
   401  00011C                     l937:
   402                           
   403                           ;Prog_Timer.c: 319: current_state = 'C';
   404  00011C  0E43               	movlw	67
   405  00011E  6E18               	movwf	_current_state^0,c
   406                           
   407                           ;Prog_Timer.c: 320: break;
   408  000120  EFD1  F000         	goto	l957
   409  000124                     l939:
   410                           
   411                           ;Prog_Timer.c: 322: if (var_TC_flag == 1)
   412  000124  0407               	decf	_var_TC_flag^0,w,c
   413  000126  A4D8               	btfss	status,2,c
   414  000128  EF98  F000         	goto	u51
   415  00012C  EF9A  F000         	goto	u50
   416  000130                     u51:
   417  000130  EFD1  F000         	goto	l957
   418  000134                     u50:
   419  000134                     
   420                           ;Prog_Timer.c: 323: current_state = 'D';
   421  000134  0E44               	movlw	68
   422  000136  6E18               	movwf	_current_state^0,c
   423  000138  EFD1  F000         	goto	l957
   424  00013C                     l943:
   425                           
   426                           ;Prog_Timer.c: 326: current_state = 'E';
   427  00013C  0E45               	movlw	69
   428  00013E  6E18               	movwf	_current_state^0,c
   429                           
   430                           ;Prog_Timer.c: 327: break;
   431  000140  EFD1  F000         	goto	l957
   432  000144                     l945:
   433                           
   434                           ;Prog_Timer.c: 329: if (var_TC_flag == 1)
   435  000144  0407               	decf	_var_TC_flag^0,w,c
   436  000146  A4D8               	btfss	status,2,c
   437  000148  EFA8  F000         	goto	u61
   438  00014C  EFAA  F000         	goto	u60
   439  000150                     u61:
   440  000150  EFD1  F000         	goto	l957
   441  000154                     u60:
   442  000154                     
   443                           ;Prog_Timer.c: 330: current_state = 'F';
   444  000154  0E46               	movlw	70
   445  000156  6E18               	movwf	_current_state^0,c
   446  000158  EFD1  F000         	goto	l957
   447  00015C                     l949:
   448                           
   449                           ;Prog_Timer.c: 333: current_state = 'A';
   450  00015C  0E41               	movlw	65
   451  00015E  6E18               	movwf	_current_state^0,c
   452                           
   453                           ;Prog_Timer.c: 334: break;
   454  000160  EFD1  F000         	goto	l957
   455  000164                     l951:
   456                           
   457                           ;Prog_Timer.c: 337: error = 1;
   458  000164  0E01               	movlw	1
   459  000166  6E17               	movwf	state_logic@error^0,c
   460                           
   461                           ;Prog_Timer.c: 338: break;
   462  000168  EFD1  F000         	goto	l957
   463  00016C                     l955:
   464  00016C  5018               	movf	_current_state^0,w,c
   465                           
   466                           ; Switch size 1, requested type "simple"
   467                           ; Number of cases is 6, Range of values is 65 to 70
   468                           ; switch strategies available:
   469                           ; Name         Instructions Cycles
   470                           ; simple_byte           19    10 (average)
   471                           ;	Chosen strategy is simple_byte
   472  00016E  0A41               	xorlw	65	; case 65
   473  000170  B4D8               	btfsc	status,2,c
   474  000172  EF82  F000         	goto	l933
   475  000176  0A03               	xorlw	3	; case 66
   476  000178  B4D8               	btfsc	status,2,c
   477  00017A  EF8E  F000         	goto	l937
   478  00017E  0A01               	xorlw	1	; case 67
   479  000180  B4D8               	btfsc	status,2,c
   480  000182  EF92  F000         	goto	l939
   481  000186  0A07               	xorlw	7	; case 68
   482  000188  B4D8               	btfsc	status,2,c
   483  00018A  EF9E  F000         	goto	l943
   484  00018E  0A01               	xorlw	1	; case 69
   485  000190  B4D8               	btfsc	status,2,c
   486  000192  EFA2  F000         	goto	l945
   487  000196  0A03               	xorlw	3	; case 70
   488  000198  B4D8               	btfsc	status,2,c
   489  00019A  EFAE  F000         	goto	l949
   490  00019E  EFB2  F000         	goto	l951
   491  0001A2                     l957:
   492                           
   493                           ;Prog_Timer.c: 340: var_CLK_flag = 0;
   494  0001A2  0E00               	movlw	0
   495  0001A4  6E0A               	movwf	_var_CLK_flag^0,c
   496  0001A6                     l99:
   497                           
   498                           ;Prog_Timer.c: 341: };Prog_Timer.c: 342: return (error);
   499  0001A6  5017               	movf	state_logic@error^0,w,c
   500  0001A8  0012               	return		;funcret
   501  0001AA                     __end_of_state_logic:
   502                           	callstack 0
   503                           
   504 ;; *************** function _output_logic *****************
   505 ;; Defined at:
   506 ;;		line 347 in file "Prog_Timer.c"
   507 ;; Parameters:    Size  Location     Type
   508 ;;		None
   509 ;; Auto vars:     Size  Location     Type
   510 ;;  error           1   10[COMRAM] unsigned char 
   511 ;; Return value:  Size  Location     Type
   512 ;;                  1    wreg      unsigned char 
   513 ;; Registers used:
   514 ;;		wreg, status,2, status,0, cstack
   515 ;; Tracked objects:
   516 ;;		On entry : 0/0
   517 ;;		On exit  : 0/0
   518 ;;		Unchanged: 0/0
   519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   520 ;;      Params:         0       0       0       0       0       0       0
   521 ;;      Locals:         1       0       0       0       0       0       0
   522 ;;      Temps:          0       0       0       0       0       0       0
   523 ;;      Totals:         1       0       0       0       0       0       0
   524 ;;Total ram usage:        1 bytes
   525 ;; Hardware stack levels used: 1
   526 ;; Hardware stack levels required when called: 2
   527 ;; This function calls:
   528 ;;		_datapath
   529 ;;		_read_inputs
   530 ;; This function is called by:
   531 ;;		_main
   532 ;; This function uses a non-reentrant model
   533 ;;
   534                           
   535                           	psect	text3
   536  000012                     __ptext3:
   537                           	callstack 0
   538  000012                     _output_logic:
   539                           	callstack 28
   540  000012                     
   541                           ;Prog_Timer.c: 349: char error = 0;
   542  000012  0E00               	movlw	0
   543  000014  6E17               	movwf	output_logic@error^0,c
   544                           
   545                           ;Prog_Timer.c: 350: switch (current_state)
   546  000016  EF57  F000         	goto	l993
   547  00001A                     l963:
   548                           
   549                           ;Prog_Timer.c: 353: var_Timer_out = 0;
   550  00001A  0E00               	movlw	0
   551  00001C  6E0C               	movwf	_var_Timer_out^0,c
   552                           
   553                           ;Prog_Timer.c: 354: var_ETP = 0;
   554  00001E  0E00               	movlw	0
   555  000020  6E0B               	movwf	_var_ETP^0,c
   556                           
   557                           ;Prog_Timer.c: 355: break;
   558  000022  EF72  F000         	goto	l995
   559  000026                     l965:
   560                           
   561                           ;Prog_Timer.c: 358: var_Timer_out = 1;
   562  000026  0E01               	movlw	1
   563  000028  6E0C               	movwf	_var_Timer_out^0,c
   564                           
   565                           ;Prog_Timer.c: 359: var_ETP = 0;
   566  00002A  0E00               	movlw	0
   567  00002C  6E0B               	movwf	_var_ETP^0,c
   568  00002E                     
   569                           ;Prog_Timer.c: 361: read_inputs();
   570  00002E  ECD5  F000         	call	_read_inputs	;wreg free
   571  000032                     
   572                           ;Prog_Timer.c: 364: var_Counter_mod64k = 0;
   573  000032  0E00               	movlw	0
   574  000034  6E04               	movwf	(_var_Counter_mod64k+1)^0,c
   575  000036  0E00               	movlw	0
   576  000038  6E03               	movwf	_var_Counter_mod64k^0,c
   577  00003A                     
   578                           ;Prog_Timer.c: 365: var_Max_Count = var_PC - 1;
   579  00003A  0EFF               	movlw	255
   580  00003C  2405               	addwf	_var_PC^0,w,c
   581  00003E  6E01               	movwf	_var_Max_Count^0,c
   582  000040  0EFF               	movlw	255
   583  000042  2006               	addwfc	(_var_PC+1)^0,w,c
   584  000044  6E02               	movwf	(_var_Max_Count+1)^0,c
   585  000046                     l973:
   586                           
   587                           ;Prog_Timer.c: 367: INT1IE = 1;
   588  000046  86F0               	bsf	4080,3,c	;volatile
   589                           
   590                           ;Prog_Timer.c: 369: break;
   591  000048  EF72  F000         	goto	l995
   592  00004C                     l975:
   593                           
   594                           ;Prog_Timer.c: 372: var_Timer_out = 1;
   595  00004C  0E01               	movlw	1
   596  00004E  6E0C               	movwf	_var_Timer_out^0,c
   597                           
   598                           ;Prog_Timer.c: 373: var_ETP = 0;
   599  000050  0E00               	movlw	0
   600  000052  6E0B               	movwf	_var_ETP^0,c
   601  000054                     l977:
   602                           
   603                           ;Prog_Timer.c: 374: datapath();
   604  000054  EC7C  F001         	call	_datapath	;wreg free
   605                           
   606                           ;Prog_Timer.c: 375: break;
   607  000058  EF72  F000         	goto	l995
   608  00005C                     l979:
   609                           
   610                           ;Prog_Timer.c: 378: var_Timer_out = 0;
   611  00005C  0E00               	movlw	0
   612  00005E  6E0C               	movwf	_var_Timer_out^0,c
   613                           
   614                           ;Prog_Timer.c: 379: var_ETP = 1;
   615  000060  0E01               	movlw	1
   616  000062  6E0B               	movwf	_var_ETP^0,c
   617                           
   618                           ;Prog_Timer.c: 382: var_Counter_mod64k = 0;
   619  000064  0E00               	movlw	0
   620  000066  6E04               	movwf	(_var_Counter_mod64k+1)^0,c
   621  000068  0E00               	movlw	0
   622  00006A  6E03               	movwf	_var_Counter_mod64k^0,c
   623                           
   624                           ;Prog_Timer.c: 383: var_Max_Count = 50 - 1;
   625  00006C  0E00               	movlw	0
   626  00006E  6E02               	movwf	(_var_Max_Count+1)^0,c
   627  000070  0E31               	movlw	49
   628  000072  6E01               	movwf	_var_Max_Count^0,c
   629  000074  EF23  F000         	goto	l973
   630  000078                     l983:
   631                           
   632                           ;Prog_Timer.c: 389: var_Timer_out = 0;
   633  000078  0E00               	movlw	0
   634  00007A  6E0C               	movwf	_var_Timer_out^0,c
   635                           
   636                           ;Prog_Timer.c: 390: var_ETP = 1;
   637  00007C  0E01               	movlw	1
   638  00007E  6E0B               	movwf	_var_ETP^0,c
   639  000080  EF2A  F000         	goto	l977
   640  000084                     l987:
   641                           
   642                           ;Prog_Timer.c: 396: var_Timer_out = 0;
   643  000084  0E00               	movlw	0
   644  000086  6E0C               	movwf	_var_Timer_out^0,c
   645                           
   646                           ;Prog_Timer.c: 397: var_ETP = 0;
   647  000088  0E00               	movlw	0
   648  00008A  6E0B               	movwf	_var_ETP^0,c
   649                           
   650                           ;Prog_Timer.c: 399: var_Counter_mod64k = 0;
   651  00008C  0E00               	movlw	0
   652  00008E  6E04               	movwf	(_var_Counter_mod64k+1)^0,c
   653  000090  0E00               	movlw	0
   654  000092  6E03               	movwf	_var_Counter_mod64k^0,c
   655                           
   656                           ;Prog_Timer.c: 400: var_Max_Count = 0;
   657  000094  0E00               	movlw	0
   658  000096  6E02               	movwf	(_var_Max_Count+1)^0,c
   659  000098  0E00               	movlw	0
   660  00009A  6E01               	movwf	_var_Max_Count^0,c
   661  00009C                     
   662                           ;Prog_Timer.c: 401: INT1IE = 0;
   663  00009C  96F0               	bcf	4080,3,c	;volatile
   664                           
   665                           ;Prog_Timer.c: 403: var_TRG_flag = 0;
   666  00009E  0E00               	movlw	0
   667  0000A0  6E09               	movwf	_var_TRG_flag^0,c
   668                           
   669                           ;Prog_Timer.c: 405: break;
   670  0000A2  EF72  F000         	goto	l995
   671  0000A6                     l991:
   672                           
   673                           ;Prog_Timer.c: 408: error = 1;
   674  0000A6  0E01               	movlw	1
   675  0000A8  6E17               	movwf	output_logic@error^0,c
   676                           
   677                           ;Prog_Timer.c: 409: }
   678  0000AA  EF72  F000         	goto	l995
   679  0000AE                     l993:
   680  0000AE  5018               	movf	_current_state^0,w,c
   681                           
   682                           ; Switch size 1, requested type "simple"
   683                           ; Number of cases is 6, Range of values is 65 to 70
   684                           ; switch strategies available:
   685                           ; Name         Instructions Cycles
   686                           ; simple_byte           19    10 (average)
   687                           ;	Chosen strategy is simple_byte
   688  0000B0  0A41               	xorlw	65	; case 65
   689  0000B2  B4D8               	btfsc	status,2,c
   690  0000B4  EF0D  F000         	goto	l963
   691  0000B8  0A03               	xorlw	3	; case 66
   692  0000BA  B4D8               	btfsc	status,2,c
   693  0000BC  EF13  F000         	goto	l965
   694  0000C0  0A01               	xorlw	1	; case 67
   695  0000C2  B4D8               	btfsc	status,2,c
   696  0000C4  EF26  F000         	goto	l975
   697  0000C8  0A07               	xorlw	7	; case 68
   698  0000CA  B4D8               	btfsc	status,2,c
   699  0000CC  EF2E  F000         	goto	l979
   700  0000D0  0A01               	xorlw	1	; case 69
   701  0000D2  B4D8               	btfsc	status,2,c
   702  0000D4  EF3C  F000         	goto	l983
   703  0000D8  0A03               	xorlw	3	; case 70
   704  0000DA  B4D8               	btfsc	status,2,c
   705  0000DC  EF42  F000         	goto	l987
   706  0000E0  EF53  F000         	goto	l991
   707  0000E4                     l995:
   708                           
   709                           ;Prog_Timer.c: 410: return (error);
   710  0000E4  5017               	movf	output_logic@error^0,w,c
   711  0000E6  0012               	return		;funcret
   712  0000E8                     __end_of_output_logic:
   713                           	callstack 0
   714                           
   715 ;; *************** function _read_inputs *****************
   716 ;; Defined at:
   717 ;;		line 461 in file "Prog_Timer.c"
   718 ;; Parameters:    Size  Location     Type
   719 ;;		None
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  var_Buff3       2    8[COMRAM] unsigned int 
   722 ;;  var_Buff4       2    6[COMRAM] unsigned int 
   723 ;;  var_Buff2       2    4[COMRAM] unsigned int 
   724 ;;  var_Buff1       2    2[COMRAM] unsigned int 
   725 ;; Return value:  Size  Location     Type
   726 ;;                  1    wreg      void 
   727 ;; Registers used:
   728 ;;		wreg, status,2, status,0
   729 ;; Tracked objects:
   730 ;;		On entry : 0/0
   731 ;;		On exit  : 0/0
   732 ;;		Unchanged: 0/0
   733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   734 ;;      Params:         0       0       0       0       0       0       0
   735 ;;      Locals:         8       0       0       0       0       0       0
   736 ;;      Temps:          2       0       0       0       0       0       0
   737 ;;      Totals:        10       0       0       0       0       0       0
   738 ;;Total ram usage:       10 bytes
   739 ;; Hardware stack levels used: 1
   740 ;; Hardware stack levels required when called: 1
   741 ;; This function calls:
   742 ;;		Nothing
   743 ;; This function is called by:
   744 ;;		_state_logic
   745 ;;		_output_logic
   746 ;; This function uses a non-reentrant model
   747 ;;
   748                           
   749                           	psect	text4
   750  0001AA                     __ptext4:
   751                           	callstack 0
   752  0001AA                     _read_inputs:
   753                           	callstack 28
   754  0001AA                     
   755                           ;Prog_Timer.c: 464: unsigned int var_Buff2 = 0;
   756  0001AA  0E00               	movlw	0
   757  0001AC  6E12               	movwf	(read_inputs@var_Buff2+1)^0,c
   758  0001AE  0E00               	movlw	0
   759  0001B0  6E11               	movwf	read_inputs@var_Buff2^0,c
   760                           
   761                           ;Prog_Timer.c: 465: unsigned int var_Buff3 = 0;
   762  0001B2  0E00               	movlw	0
   763  0001B4  6E16               	movwf	(read_inputs@var_Buff3+1)^0,c
   764  0001B6  0E00               	movlw	0
   765  0001B8  6E15               	movwf	read_inputs@var_Buff3^0,c
   766                           
   767                           ;Prog_Timer.c: 466: unsigned int var_Buff4 = 0;
   768  0001BA  0E00               	movlw	0
   769  0001BC  6E14               	movwf	(read_inputs@var_Buff4+1)^0,c
   770  0001BE  0E00               	movlw	0
   771  0001C0  6E13               	movwf	read_inputs@var_Buff4^0,c
   772  0001C2                     
   773                           ;Prog_Timer.c: 469: var_Buff1 = (PORTA & 0b00001111) << 4;
   774  0001C2  5080               	movf	128,w,c	;volatile
   775  0001C4  0B0F               	andlw	15
   776  0001C6  6E0D               	movwf	??_read_inputs^0,c
   777  0001C8  6A0E               	clrf	(??_read_inputs+1)^0,c
   778  0001CA  3A0D               	swapf	??_read_inputs^0,f,c
   779  0001CC  3A0E               	swapf	(??_read_inputs+1)^0,f,c
   780  0001CE  0EF0               	movlw	240
   781  0001D0  160E               	andwf	(??_read_inputs+1)^0,f,c
   782  0001D2  500D               	movf	??_read_inputs^0,w,c
   783  0001D4  0B0F               	andlw	15
   784  0001D6  120E               	iorwf	(??_read_inputs+1)^0,f,c
   785  0001D8  0EF0               	movlw	240
   786  0001DA  160D               	andwf	??_read_inputs^0,f,c
   787  0001DC  C00D  F00F         	movff	??_read_inputs,read_inputs@var_Buff1
   788  0001E0  C00E  F010         	movff	??_read_inputs+1,read_inputs@var_Buff1+1
   789  0001E4                     
   790                           ;Prog_Timer.c: 470: var_Buff2 = (PORTB & 0b11110000) << 4;
   791  0001E4  5081               	movf	129,w,c	;volatile
   792  0001E6  0BF0               	andlw	240
   793  0001E8  6E0D               	movwf	??_read_inputs^0,c
   794  0001EA  6A0E               	clrf	(??_read_inputs+1)^0,c
   795  0001EC  3A0D               	swapf	??_read_inputs^0,f,c
   796  0001EE  3A0E               	swapf	(??_read_inputs+1)^0,f,c
   797  0001F0  0EF0               	movlw	240
   798  0001F2  160E               	andwf	(??_read_inputs+1)^0,f,c
   799  0001F4  500D               	movf	??_read_inputs^0,w,c
   800  0001F6  0B0F               	andlw	15
   801  0001F8  120E               	iorwf	(??_read_inputs+1)^0,f,c
   802  0001FA  0EF0               	movlw	240
   803  0001FC  160D               	andwf	??_read_inputs^0,f,c
   804  0001FE  C00D  F011         	movff	??_read_inputs,read_inputs@var_Buff2
   805  000202  C00E  F012         	movff	??_read_inputs+1,read_inputs@var_Buff2+1
   806  000206                     
   807                           ;Prog_Timer.c: 472: var_Buff3 = (PORTC & 0b11111111);
   808  000206  CF82 F015          	movff	3970,read_inputs@var_Buff3	;volatile
   809  00020A  6A16               	clrf	(read_inputs@var_Buff3+1)^0,c
   810  00020C                     
   811                           ;Prog_Timer.c: 473: var_Buff4 = (var_Buff3 & 0x00F0) << 8;
   812  00020C  0EF0               	movlw	240
   813  00020E  1415               	andwf	read_inputs@var_Buff3^0,w,c
   814  000210  6E0D               	movwf	??_read_inputs^0,c
   815  000212  0E00               	movlw	0
   816  000214  1416               	andwf	(read_inputs@var_Buff3+1)^0,w,c
   817  000216  6E0E               	movwf	(??_read_inputs+1)^0,c
   818  000218  C00D  F00E         	movff	??_read_inputs,??_read_inputs+1
   819  00021C  6A0D               	clrf	??_read_inputs^0,c
   820  00021E  C00D  F013         	movff	??_read_inputs,read_inputs@var_Buff4
   821  000222  C00E  F014         	movff	??_read_inputs+1,read_inputs@var_Buff4+1
   822  000226                     
   823                           ;Prog_Timer.c: 475: var_Buff3 = (var_Buff3 & 0b0000000000001111);
   824  000226  0E0F               	movlw	15
   825  000228  1415               	andwf	read_inputs@var_Buff3^0,w,c
   826  00022A  6E15               	movwf	read_inputs@var_Buff3^0,c
   827  00022C  6A16               	clrf	(read_inputs@var_Buff3+1)^0,c
   828  00022E                     
   829                           ;Prog_Timer.c: 477: var_PC = var_Buff1 | var_Buff2 | var_Buff3 | var_Buff4;
   830  00022E  5011               	movf	read_inputs@var_Buff2^0,w,c
   831  000230  100F               	iorwf	read_inputs@var_Buff1^0,w,c
   832  000232  6E0D               	movwf	??_read_inputs^0,c
   833  000234  5012               	movf	(read_inputs@var_Buff2+1)^0,w,c
   834  000236  1010               	iorwf	(read_inputs@var_Buff1+1)^0,w,c
   835  000238  6E0E               	movwf	(??_read_inputs+1)^0,c
   836  00023A  5015               	movf	read_inputs@var_Buff3^0,w,c
   837  00023C  120D               	iorwf	??_read_inputs^0,f,c
   838  00023E  5016               	movf	(read_inputs@var_Buff3+1)^0,w,c
   839  000240  120E               	iorwf	(??_read_inputs+1)^0,f,c
   840  000242  5013               	movf	read_inputs@var_Buff4^0,w,c
   841  000244  100D               	iorwf	??_read_inputs^0,w,c
   842  000246  6E05               	movwf	_var_PC^0,c
   843  000248  5014               	movf	(read_inputs@var_Buff4+1)^0,w,c
   844  00024A  100E               	iorwf	(??_read_inputs+1)^0,w,c
   845  00024C  6E06               	movwf	(_var_PC+1)^0,c
   846  00024E  0012               	return		;funcret
   847  000250                     __end_of_read_inputs:
   848                           	callstack 0
   849                           
   850 ;; *************** function _datapath *****************
   851 ;; Defined at:
   852 ;;		line 438 in file "Prog_Timer.c"
   853 ;; Parameters:    Size  Location     Type
   854 ;;		None
   855 ;; Auto vars:     Size  Location     Type
   856 ;;		None
   857 ;; Return value:  Size  Location     Type
   858 ;;                  1    wreg      void 
   859 ;; Registers used:
   860 ;;		wreg, status,2, status,0
   861 ;; Tracked objects:
   862 ;;		On entry : 0/0
   863 ;;		On exit  : 0/0
   864 ;;		Unchanged: 0/0
   865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   866 ;;      Params:         0       0       0       0       0       0       0
   867 ;;      Locals:         0       0       0       0       0       0       0
   868 ;;      Temps:          0       0       0       0       0       0       0
   869 ;;      Totals:         0       0       0       0       0       0       0
   870 ;;Total ram usage:        0 bytes
   871 ;; Hardware stack levels used: 1
   872 ;; Hardware stack levels required when called: 1
   873 ;; This function calls:
   874 ;;		Nothing
   875 ;; This function is called by:
   876 ;;		_output_logic
   877 ;; This function uses a non-reentrant model
   878 ;;
   879                           
   880                           	psect	text5
   881  0002F8                     __ptext5:
   882                           	callstack 0
   883  0002F8                     _datapath:
   884                           	callstack 28
   885  0002F8                     
   886                           ;Prog_Timer.c: 441: if (var_CLK_flag == 1)
   887  0002F8  040A               	decf	_var_CLK_flag^0,w,c
   888  0002FA  A4D8               	btfss	status,2,c
   889  0002FC  EF82  F001         	goto	u11
   890  000300  EF84  F001         	goto	u10
   891  000304                     u11:
   892  000304  EF97  F001         	goto	l135
   893  000308                     u10:
   894  000308                     
   895                           ;Prog_Timer.c: 442: {;Prog_Timer.c: 443: if (var_Counter_mod64k < var_Max_Count)
   896  000308  5001               	movf	_var_Max_Count^0,w,c
   897  00030A  5C03               	subwf	_var_Counter_mod64k^0,w,c
   898  00030C  5002               	movf	(_var_Max_Count+1)^0,w,c
   899  00030E  5804               	subwfb	(_var_Counter_mod64k+1)^0,w,c
   900  000310  B0D8               	btfsc	status,0,c
   901  000312  EF8D  F001         	goto	u21
   902  000316  EF8F  F001         	goto	u20
   903  00031A                     u21:
   904  00031A  EF93  F001         	goto	l909
   905  00031E                     u20:
   906  00031E                     
   907                           ;Prog_Timer.c: 444: {;Prog_Timer.c: 445: var_Counter_mod64k++;
   908  00031E  4A03               	infsnz	_var_Counter_mod64k^0,f,c
   909  000320  2A04               	incf	(_var_Counter_mod64k+1)^0,f,c
   910                           
   911                           ;Prog_Timer.c: 446: }
   912  000322  EF95  F001         	goto	l134
   913  000326                     l909:
   914                           
   915                           ;Prog_Timer.c: 447: else;Prog_Timer.c: 448: {;Prog_Timer.c: 450: var_TC_flag = 1;
   916  000326  0E01               	movlw	1
   917  000328  6E07               	movwf	_var_TC_flag^0,c
   918  00032A                     l134:
   919                           
   920                           ;Prog_Timer.c: 452: };Prog_Timer.c: 454: var_CLK_flag = 0;
   921  00032A  0E00               	movlw	0
   922  00032C  6E0A               	movwf	_var_CLK_flag^0,c
   923  00032E                     l135:
   924  00032E  0012               	return		;funcret
   925  000330                     __end_of_datapath:
   926                           	callstack 0
   927                           
   928 ;; *************** function _init_system *****************
   929 ;; Defined at:
   930 ;;		line 146 in file "Prog_Timer.c"
   931 ;; Parameters:    Size  Location     Type
   932 ;;		None
   933 ;; Auto vars:     Size  Location     Type
   934 ;;		None
   935 ;; Return value:  Size  Location     Type
   936 ;;                  1    wreg      void 
   937 ;; Registers used:
   938 ;;		wreg, status,2
   939 ;; Tracked objects:
   940 ;;		On entry : 0/0
   941 ;;		On exit  : 0/0
   942 ;;		Unchanged: 0/0
   943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   944 ;;      Params:         0       0       0       0       0       0       0
   945 ;;      Locals:         0       0       0       0       0       0       0
   946 ;;      Temps:          0       0       0       0       0       0       0
   947 ;;      Totals:         0       0       0       0       0       0       0
   948 ;;Total ram usage:        0 bytes
   949 ;; Hardware stack levels used: 1
   950 ;; Hardware stack levels required when called: 1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_main
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           	psect	text6
   959  000250                     __ptext6:
   960                           	callstack 0
   961  000250                     _init_system:
   962                           	callstack 29
   963  000250                     
   964                           ;Prog_Timer.c: 255: PORTA = 0x00;
   965  000250  0E00               	movlw	0
   966  000252  6E80               	movwf	128,c	;volatile
   967                           
   968                           ;Prog_Timer.c: 256: LATA = 0x00;
   969  000254  0E00               	movlw	0
   970  000256  6E89               	movwf	137,c	;volatile
   971                           
   972                           ;Prog_Timer.c: 257: ADCON1 = 0x0F;
   973  000258  0E0F               	movlw	15
   974  00025A  6EC1               	movwf	193,c	;volatile
   975                           
   976                           ;Prog_Timer.c: 258: TRISA = 0b00001111;
   977  00025C  0E0F               	movlw	15
   978  00025E  6E92               	movwf	146,c	;volatile
   979                           
   980                           ;Prog_Timer.c: 260: PORTB = 0x00;
   981  000260  0E00               	movlw	0
   982  000262  6E81               	movwf	129,c	;volatile
   983                           
   984                           ;Prog_Timer.c: 261: LATB = 0x00;
   985  000264  0E00               	movlw	0
   986  000266  6E8A               	movwf	138,c	;volatile
   987                           
   988                           ;Prog_Timer.c: 262: TRISB = 0b11110011;
   989  000268  0EF3               	movlw	243
   990  00026A  6E93               	movwf	147,c	;volatile
   991                           
   992                           ;Prog_Timer.c: 266: PORTC = 0x00;
   993  00026C  0E00               	movlw	0
   994  00026E  6E82               	movwf	130,c	;volatile
   995                           
   996                           ;Prog_Timer.c: 267: LATC = 0x00;
   997  000270  0E00               	movlw	0
   998  000272  6E8B               	movwf	139,c	;volatile
   999  000274                     
  1000                           ;Prog_Timer.c: 268: TRISC = 0b11111111;
  1001  000274  6894               	setf	148,c	;volatile
  1002                           
  1003                           ;Prog_Timer.c: 271: PORTD = 0x00;
  1004  000276  0E00               	movlw	0
  1005  000278  6E83               	movwf	131,c	;volatile
  1006                           
  1007                           ;Prog_Timer.c: 272: LATD = 0x00;
  1008  00027A  0E00               	movlw	0
  1009  00027C  6E8C               	movwf	140,c	;volatile
  1010                           
  1011                           ;Prog_Timer.c: 273: TRISD = 0x00;
  1012  00027E  0E00               	movlw	0
  1013  000280  6E95               	movwf	149,c	;volatile
  1014                           
  1015                           ;Prog_Timer.c: 275: PORTE = 0x00;
  1016  000282  0E00               	movlw	0
  1017  000284  6E84               	movwf	132,c	;volatile
  1018                           
  1019                           ;Prog_Timer.c: 276: LATE = 0x00;
  1020  000286  0E00               	movlw	0
  1021  000288  6E8D               	movwf	141,c	;volatile
  1022                           
  1023                           ;Prog_Timer.c: 277: TRISE = 0b00000000;
  1024  00028A  0E00               	movlw	0
  1025  00028C  6E96               	movwf	150,c	;volatile
  1026  00028E                     
  1027                           ;Prog_Timer.c: 280: INTEDG0 = 0;
  1028  00028E  9CF1               	bcf	4081,6,c	;volatile
  1029  000290                     
  1030                           ;Prog_Timer.c: 282: INT0IE = 1;
  1031  000290  88F2               	bsf	4082,4,c	;volatile
  1032  000292                     
  1033                           ;Prog_Timer.c: 285: INTEDG1 = 1;
  1034  000292  8AF1               	bsf	4081,5,c	;volatile
  1035  000294                     
  1036                           ;Prog_Timer.c: 286: INT1IE = 0;
  1037  000294  96F0               	bcf	4080,3,c	;volatile
  1038  000296                     
  1039                           ;Prog_Timer.c: 288: GIE = 1;
  1040  000296  8EF2               	bsf	4082,7,c	;volatile
  1041                           
  1042                           ;Prog_Timer.c: 291: var_Timer_out = 0;
  1043  000298  0E00               	movlw	0
  1044  00029A  6E0C               	movwf	_var_Timer_out^0,c
  1045                           
  1046                           ;Prog_Timer.c: 292: var_ETP = 0;
  1047  00029C  0E00               	movlw	0
  1048  00029E  6E0B               	movwf	_var_ETP^0,c
  1049                           
  1050                           ;Prog_Timer.c: 294: var_TRG_flag = 0;
  1051  0002A0  0E00               	movlw	0
  1052  0002A2  6E09               	movwf	_var_TRG_flag^0,c
  1053                           
  1054                           ;Prog_Timer.c: 295: var_CLK_flag = 0;
  1055  0002A4  0E00               	movlw	0
  1056  0002A6  6E0A               	movwf	_var_CLK_flag^0,c
  1057                           
  1058                           ;Prog_Timer.c: 296: var_CD_flag = 0;
  1059  0002A8  0E00               	movlw	0
  1060  0002AA  6E08               	movwf	_var_CD_flag^0,c
  1061                           
  1062                           ;Prog_Timer.c: 298: current_state = 'A';
  1063  0002AC  0E41               	movlw	65
  1064  0002AE  6E18               	movwf	_current_state^0,c
  1065  0002B0  0012               	return		;funcret
  1066  0002B2                     __end_of_init_system:
  1067                           	callstack 0
  1068                           
  1069 ;; *************** function _ISR *****************
  1070 ;; Defined at:
  1071 ;;		line 415 in file "Prog_Timer.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;		None
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, status,2
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1085 ;;      Params:         0       0       0       0       0       0       0
  1086 ;;      Locals:         0       0       0       0       0       0       0
  1087 ;;      Temps:          0       0       0       0       0       0       0
  1088 ;;      Totals:         0       0       0       0       0       0       0
  1089 ;;Total ram usage:        0 bytes
  1090 ;; Hardware stack levels used: 1
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		Interrupt level 2
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	intcode
  1099  000008                     __pintcode:
  1100                           	callstack 0
  1101  000008                     _ISR:
  1102                           	callstack 28
  1103                           
  1104                           ;incstack = 0
  1105  000008  8219               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1106  00000A  ED98  F001         	call	int_func,f	;refresh shadow registers
  1107                           
  1108                           	psect	intcode_body
  1109  000330                     __pintcode_body:
  1110                           	callstack 28
  1111  000330                     int_func:
  1112                           	callstack 28
  1113  000330  0006               	pop		; remove dummy address from shadow register refresh
  1114  000332                     
  1115                           ;Prog_Timer.c: 417: GIE = 0;
  1116  000332  9EF2               	bcf	4082,7,c	;volatile
  1117                           
  1118                           ;Prog_Timer.c: 418: if (INT1IF == 1)
  1119  000334  A0F0               	btfss	4080,0,c	;volatile
  1120  000336  EF9F  F001         	goto	i2u9_41
  1121  00033A  EFA1  F001         	goto	i2u9_40
  1122  00033E                     i2u9_41:
  1123  00033E  EFA4  F001         	goto	i2l1021
  1124  000342                     i2u9_40:
  1125  000342                     
  1126                           ;Prog_Timer.c: 419: {;Prog_Timer.c: 420: var_CLK_flag = 1;
  1127  000342  0E01               	movlw	1
  1128  000344  6E0A               	movwf	_var_CLK_flag^0,c
  1129  000346                     
  1130                           ;Prog_Timer.c: 422: INT1IF = 0;
  1131  000346  90F0               	bcf	4080,0,c	;volatile
  1132  000348                     i2l1021:
  1133                           
  1134                           ;Prog_Timer.c: 423: };Prog_Timer.c: 424: if (INT0IF == 1)
  1135  000348  A2F2               	btfss	4082,1,c	;volatile
  1136  00034A  EFA9  F001         	goto	i2u10_41
  1137  00034E  EFAB  F001         	goto	i2u10_40
  1138  000352                     i2u10_41:
  1139  000352  EFAE  F001         	goto	i2l1027
  1140  000356                     i2u10_40:
  1141  000356                     
  1142                           ;Prog_Timer.c: 425: {;Prog_Timer.c: 426: var_TRG_flag = 1;
  1143  000356  0E01               	movlw	1
  1144  000358  6E09               	movwf	_var_TRG_flag^0,c
  1145  00035A                     
  1146                           ;Prog_Timer.c: 429: INT0IF = 0;
  1147  00035A  92F2               	bcf	4082,1,c	;volatile
  1148  00035C                     i2l1027:
  1149                           
  1150                           ;Prog_Timer.c: 430: };Prog_Timer.c: 431: GIE = 1;
  1151  00035C  8EF2               	bsf	4082,7,c	;volatile
  1152  00035E  9219               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1153  000360  0011               	retfie		f
  1154  000362                     __end_of_ISR:
  1155                           	callstack 0
  1156  0000                     
  1157                           	psect	rparam
  1158  0000                     
  1159                           	psect	temp
  1160  000019                     btemp:
  1161                           	callstack 0
  1162  000019                     	ds	1
  1163  0000                     int$flags	set	btemp
  1164  0000                     wtemp8	set	btemp+1
  1165  0000                     ttemp5	set	btemp+1
  1166  0000                     ttemp6	set	btemp+4
  1167  0000                     ttemp7	set	btemp+8
  1168                           
  1169                           	psect	idloc
  1170                           
  1171                           ;Config register IDLOC0 @ 0x200000
  1172                           ;	unspecified, using default values
  1173  200000                     	org	2097152
  1174  200000  FF                 	db	255
  1175                           
  1176                           ;Config register IDLOC1 @ 0x200001
  1177                           ;	unspecified, using default values
  1178  200001                     	org	2097153
  1179  200001  FF                 	db	255
  1180                           
  1181                           ;Config register IDLOC2 @ 0x200002
  1182                           ;	unspecified, using default values
  1183  200002                     	org	2097154
  1184  200002  FF                 	db	255
  1185                           
  1186                           ;Config register IDLOC3 @ 0x200003
  1187                           ;	unspecified, using default values
  1188  200003                     	org	2097155
  1189  200003  FF                 	db	255
  1190                           
  1191                           ;Config register IDLOC4 @ 0x200004
  1192                           ;	unspecified, using default values
  1193  200004                     	org	2097156
  1194  200004  FF                 	db	255
  1195                           
  1196                           ;Config register IDLOC5 @ 0x200005
  1197                           ;	unspecified, using default values
  1198  200005                     	org	2097157
  1199  200005  FF                 	db	255
  1200                           
  1201                           ;Config register IDLOC6 @ 0x200006
  1202                           ;	unspecified, using default values
  1203  200006                     	org	2097158
  1204  200006  FF                 	db	255
  1205                           
  1206                           ;Config register IDLOC7 @ 0x200007
  1207                           ;	unspecified, using default values
  1208  200007                     	org	2097159
  1209  200007  FF                 	db	255
  1210                           
  1211                           	psect	config
  1212                           
  1213                           ; Padding undefined space
  1214  300000                     	org	3145728
  1215  300000  FF                 	db	255
  1216                           
  1217                           ;Config register CONFIG1H @ 0x300001
  1218                           ;	Oscillator Selection bits
  1219                           ;	OSC = XT, XT oscillator
  1220                           ;	Fail-Safe Clock Monitor Enable bit
  1221                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1222                           ;	Internal/External Oscillator Switchover bit
  1223                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1224  300001                     	org	3145729
  1225  300001  01                 	db	1
  1226                           
  1227                           ;Config register CONFIG2L @ 0x300002
  1228                           ;	Power-up Timer Enable bit
  1229                           ;	PWRT = ON, PWRT enabled
  1230                           ;	Brown-out Reset Enable bits
  1231                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1232                           ;	Brown Out Reset Voltage bits
  1233                           ;	BORV = 3, Minimum setting
  1234  300002                     	org	3145730
  1235  300002  1E                 	db	30
  1236                           
  1237                           ;Config register CONFIG2H @ 0x300003
  1238                           ;	Watchdog Timer Enable bit
  1239                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1240                           ;	Watchdog Timer Postscale Select bits
  1241                           ;	WDTPS = 32768, 1:32768
  1242  300003                     	org	3145731
  1243  300003  1E                 	db	30
  1244                           
  1245                           ; Padding undefined space
  1246  300004                     	org	3145732
  1247  300004  FF                 	db	255
  1248                           
  1249                           ;Config register CONFIG3H @ 0x300005
  1250                           ;	CCP2 MUX bit
  1251                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1252                           ;	PORTB A/D Enable bit
  1253                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1254                           ;	Low-Power Timer1 Oscillator Enable bit
  1255                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1256                           ;	MCLR Pin Enable bit
  1257                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1258  300005                     	org	3145733
  1259  300005  81                 	db	129
  1260                           
  1261                           ;Config register CONFIG4L @ 0x300006
  1262                           ;	Stack Full/Underflow Reset Enable bit
  1263                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1264                           ;	Single-Supply ICSP Enable bit
  1265                           ;	LVP = OFF, Single-Supply ICSP disabled
  1266                           ;	Extended Instruction Set Enable bit
  1267                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1268                           ;	Background Debugger Enable bit
  1269                           ;	DEBUG = 0x1, unprogrammed default
  1270  300006                     	org	3145734
  1271  300006  81                 	db	129
  1272                           
  1273                           ; Padding undefined space
  1274  300007                     	org	3145735
  1275  300007  FF                 	db	255
  1276                           
  1277                           ;Config register CONFIG5L @ 0x300008
  1278                           ;	Code Protection bit
  1279                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1280                           ;	Code Protection bit
  1281                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1282                           ;	Code Protection bit
  1283                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1284                           ;	Code Protection bit
  1285                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1286  300008                     	org	3145736
  1287  300008  0F                 	db	15
  1288                           
  1289                           ;Config register CONFIG5H @ 0x300009
  1290                           ;	Boot Block Code Protection bit
  1291                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1292                           ;	Data EEPROM Code Protection bit
  1293                           ;	CPD = OFF, Data EEPROM not code-protected
  1294  300009                     	org	3145737
  1295  300009  C0                 	db	192
  1296                           
  1297                           ;Config register CONFIG6L @ 0x30000A
  1298                           ;	Write Protection bit
  1299                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1300                           ;	Write Protection bit
  1301                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1302                           ;	Write Protection bit
  1303                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1304                           ;	Write Protection bit
  1305                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1306  30000A                     	org	3145738
  1307  30000A  0F                 	db	15
  1308                           
  1309                           ;Config register CONFIG6H @ 0x30000B
  1310                           ;	Configuration Register Write Protection bit
  1311                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1312                           ;	Boot Block Write Protection bit
  1313                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1314                           ;	Data EEPROM Write Protection bit
  1315                           ;	WRTD = OFF, Data EEPROM not write-protected
  1316  30000B                     	org	3145739
  1317  30000B  E0                 	db	224
  1318                           
  1319                           ;Config register CONFIG7L @ 0x30000C
  1320                           ;	Table Read Protection bit
  1321                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1322                           ;	Table Read Protection bit
  1323                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1324                           ;	Table Read Protection bit
  1325                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1326                           ;	Table Read Protection bit
  1327                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1328  30000C                     	org	3145740
  1329  30000C  0F                 	db	15
  1330                           
  1331                           ;Config register CONFIG7H @ 0x30000D
  1332                           ;	Boot Block Table Read Protection bit
  1333                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1334  30000D                     	org	3145741
  1335  30000D  40                 	db	64
  1336                           tosu	equ	0xFFF
  1337                           tosh	equ	0xFFE
  1338                           tosl	equ	0xFFD
  1339                           stkptr	equ	0xFFC
  1340                           pclatu	equ	0xFFB
  1341                           pclath	equ	0xFFA
  1342                           pcl	equ	0xFF9
  1343                           tblptru	equ	0xFF8
  1344                           tblptrh	equ	0xFF7
  1345                           tblptrl	equ	0xFF6
  1346                           tablat	equ	0xFF5
  1347                           prodh	equ	0xFF4
  1348                           prodl	equ	0xFF3
  1349                           indf0	equ	0xFEF
  1350                           postinc0	equ	0xFEE
  1351                           postdec0	equ	0xFED
  1352                           preinc0	equ	0xFEC
  1353                           plusw0	equ	0xFEB
  1354                           fsr0h	equ	0xFEA
  1355                           fsr0l	equ	0xFE9
  1356                           wreg	equ	0xFE8
  1357                           indf1	equ	0xFE7
  1358                           postinc1	equ	0xFE6
  1359                           postdec1	equ	0xFE5
  1360                           preinc1	equ	0xFE4
  1361                           plusw1	equ	0xFE3
  1362                           fsr1h	equ	0xFE2
  1363                           fsr1l	equ	0xFE1
  1364                           bsr	equ	0xFE0
  1365                           indf2	equ	0xFDF
  1366                           postinc2	equ	0xFDE
  1367                           postdec2	equ	0xFDD
  1368                           preinc2	equ	0xFDC
  1369                           plusw2	equ	0xFDB
  1370                           fsr2h	equ	0xFDA
  1371                           fsr2l	equ	0xFD9
  1372                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     11      24
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_output_logic
    _main->_state_logic
    _state_logic->_read_inputs
    _output_logic->_read_inputs

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     240
                        _init_system
                       _output_logic
                        _state_logic
                      _write_outputs
 ---------------------------------------------------------------------------------
 (1) _write_outputs                                        2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _state_logic                                          1     1      0     105
                                             10 COMRAM     1     1      0
                        _read_inputs
 ---------------------------------------------------------------------------------
 (1) _output_logic                                         1     1      0     105
                                             10 COMRAM     1     1      0
                           _datapath
                        _read_inputs
 ---------------------------------------------------------------------------------
 (2) _read_inputs                                         10    10      0      90
                                              0 COMRAM    10    10      0
 ---------------------------------------------------------------------------------
 (2) _datapath                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_system                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _init_system
   _output_logic
     _datapath
     _read_inputs
   _state_logic
     _read_inputs
   _write_outputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      B      18       1       19.0%
BITBIGSFRhhl        2E      0       0      17        0.0%
BITBIGSFRhlh        2A      0       0      18        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhll         4      0       0      19        0.0%
BITBIGSFRl           4      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      18      21        0.0%
DATA                 0      0      18       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Thu Jun 02 20:53:28 2022

                     l90 02EE                       l96 02B0                       l99 01A6  
                     u10 0308                       u11 0304                       u20 031E  
                     u21 031A                       u30 0100                       u31 00FC  
                     u40 0114                       u41 0110                       u50 0134  
                     u51 0130                       u60 0154                       u61 0150  
                     u70 02CA                       u71 02C6                       u80 02E2  
                     u81 02DE              _state_logic 00E8                      l112 01A8  
                    l124 00E6                      l141 0388                      l134 032A  
                    l135 032E                      l138 024E                      l901 022E  
                    l911 0250                      l903 02F8                      l921 0294  
                    l913 0274                      l905 0308                      l923 0296  
                    l915 028E                      l907 031E                      l917 0290  
                    l909 0326                      l941 0134                      l933 0104  
                    l925 00E8                      l919 0292                      l951 0164  
                    l943 013C                      l935 0114                      l927 00EC  
                    l961 0012                      l945 0144                      l937 011C  
                    l929 00F0                      l891 01C2                      l971 003A  
                    l963 001A                      l947 0154                      l939 0124  
                    l955 016C                      l893 01E4                      l973 0046  
                    l965 0026                      l949 015C                      l957 01A2  
                    l895 0206                      l991 00A6                      l983 0078  
                    l975 004C                      l967 002E                      l897 020C  
                    l889 01AA                      l977 0054                      l969 0032  
                    l993 00AE                      l899 0226                      l987 0084  
                    l979 005C                      l995 00E4                      _GIE 007F97  
                    l989 009C                      l999 0362                      _ISR 0008  
                    wreg 000FE8                     ?_ISR 000D                     l1001 0384  
                   l1003 02B2                     l1013 02E6                     l1005 02B6  
                   l1009 02CE                     _LATA 000F89                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _LATE 000F8D  
                   _main 02B2                     btemp 0019                     start 000E  
           ___param_bank 000000                    ??_ISR 000D         state_logic@error 0017  
                  ?_main 000D                    i2l129 035E                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
           ?_init_system 000D             ?_read_inputs 000D             _output_logic 0012  
                  ttemp5 001A                    ttemp6 001D                    ttemp7 0021  
                  status 000FD8                    wtemp8 001A          __initialization 038A  
           __end_of_main 02F8                   ??_main 0018            __activetblptr 000002  
                 _ADCON1 000FC1                   _INT0IE 007F94                   _INT0IF 007F91  
                 _INT1IE 007F83                   _INT1IF 007F80                   i2l1021 0348  
                 i2l1023 0356                   i2l1015 0332                   i2l1025 035A  
                 i2l1017 0342                   i2l1027 035C                   i2l1019 0346  
                 i2u9_40 0342                   i2u9_41 033E         __end_of_datapath 0330  
     _var_Counter_mod64k 0003                   clear_0 0390                   _var_PC 0005  
                 isa$std 000001                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 0396            ___rparam_used 000001           __pcstackCOMRAM 000D  
           ?_state_logic 000D            _current_state 0018               __pnvCOMRAM 0018  
                _INTEDG0 007F8E                  _INTEDG1 007F8D                ?_datapath 000D  
                i2u10_40 0356                  i2u10_41 0352                  __Hparam 0000  
                __Lparam 0000            _write_outputs 0362                  __pcinit 038A  
                __ramtop 0600                  __ptext0 02B2                  __ptext1 0362  
                __ptext2 00E8                  __ptext3 0012                  __ptext4 01AA  
                __ptext5 02F8                  __ptext6 0250                  _var_ETP 000B  
             ??_datapath 000D   write_outputs@var_Buff1 000E           __pintcode_body 0330  
   end_of_initialization 0396     read_inputs@var_Buff1 000F     read_inputs@var_Buff2 0011  
   read_inputs@var_Buff3 0015     read_inputs@var_Buff4 0013            __Lmediumconst 0000  
                int_func 0330           ?_write_outputs 000D                  postinc0 000FEE  
    start_initialization 038A              __end_of_ISR 0362          ??_write_outputs 000D  
          _var_Max_Count 0001              __pbssCOMRAM 0001            ??_init_system 000D  
          ??_read_inputs 000D            ?_output_logic 000D                __pintcode 0008  
          _var_Timer_out 000C           ??_output_logic 0017      __end_of_init_system 02B2  
    __end_of_read_inputs 0250             _var_CLK_flag 000A             _var_TRG_flag 0009  
               __Hrparam 0000                 __Lrparam 0000            ??_state_logic 0017  
               _datapath 02F8              _init_system 0250              _read_inputs 01AA  
   __end_of_output_logic 00E8                 isa$xinst 000000                 int$flags 0019  
            _var_CD_flag 0008              _var_TC_flag 0007      __end_of_state_logic 01AA  
               intlevel2 0000    __end_of_write_outputs 038A        output_logic@error 0017  
