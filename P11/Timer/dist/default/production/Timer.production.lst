

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Tue May 31 17:51:34 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    24  0000                     
    25                           ; Version 2.40
    26                           ; Generated 17/11/2021 GMT
    27                           ; 
    28                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    29                           ; All rights reserved.
    30                           ; 
    31                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    32                           ; 
    33                           ; Redistribution and use in source and binary forms, with or without modification, are
    34                           ; permitted provided that the following conditions are met:
    35                           ; 
    36                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    37                           ;        conditions and the following disclaimer.
    38                           ; 
    39                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    40                           ;        of conditions and the following disclaimer in the documentation and/or other
    41                           ;        materials provided with the distribution. Publication is not required when
    42                           ;        this file is used in an embedded application.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC18F4520 Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     
    61                           	psect	idataCOMRAM
    62  00029A                     __pidataCOMRAM:
    63                           	callstack 0
    64                           
    65                           ;initializer for _current_state
    66  00029A  41                 	db	65
    67  0000                     _INT0IF	set	32657
    68  0000                     _INT1IF	set	32640
    69  0000                     _GIE	set	32663
    70  0000                     _INTEDG1	set	32653
    71  0000                     _PORTE	set	3972
    72  0000                     _PORTD	set	3971
    73  0000                     _PORTC	set	3970
    74  0000                     _PORTB	set	3969
    75  0000                     _LATA	set	3977
    76  0000                     _PORTA	set	3968
    77  0000                     _LATE	set	3981
    78  0000                     _LATD	set	3980
    79  0000                     _LATC	set	3979
    80  0000                     _LATB	set	3978
    81  0000                     _TRISA	set	3986
    82  0000                     _ADCON1	set	4033
    83  0000                     _INT1IE	set	32643
    84  0000                     _INTEDG0	set	32654
    85  0000                     _TRISE	set	3990
    86  0000                     _TRISD	set	3989
    87  0000                     _TRISC	set	3988
    88  0000                     _TRISB	set	3987
    89  0000                     _INT0IE	set	32660
    90                           
    91                           ; #config settings
    92                           
    93                           	psect	cinit
    94  00024E                     __pcinit:
    95                           	callstack 0
    96  00024E                     start_initialization:
    97                           	callstack 0
    98  00024E                     __initialization:
    99                           	callstack 0
   100                           
   101                           ; Initialize objects allocated to COMRAM (1 bytes)
   102                           ; load TBLPTR registers with __pidataCOMRAM
   103  00024E  0E9A               	movlw	low __pidataCOMRAM
   104  000250  6EF6               	movwf	tblptrl,c
   105  000252  0E02               	movlw	high __pidataCOMRAM
   106  000254  6EF7               	movwf	tblptrh,c
   107  000256  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   108  000258  6EF8               	movwf	tblptru,c
   109  00025A  0009               	tblrd		*+	;fetch initializer
   110  00025C  CFF5 F00B          	movff	tablat,__pdataCOMRAM
   111                           
   112                           ; Clear objects allocated to COMRAM (10 bytes)
   113  000260  EE00  F001         	lfsr	0,__pbssCOMRAM
   114  000264  0E0A               	movlw	10
   115  000266                     clear_0:
   116  000266  6AEE               	clrf	postinc0,c
   117  000268  06E8               	decf	wreg,f,c
   118  00026A  E1FD               	bnz	clear_0
   119  00026C                     end_of_initialization:
   120                           	callstack 0
   121  00026C                     __end_of__initialization:
   122                           	callstack 0
   123  00026C  900D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   124  00026E  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   125  000270  0E00               	movlw	low (__Lmediumconst shr (0+16))
   126  000272  6EF8               	movwf	tblptru,c
   127  000274  0100               	movlb	0
   128  000276  EFC9  F000         	goto	_main	;jump to C main() function
   129                           
   130                           	psect	bssCOMRAM
   131  000001                     __pbssCOMRAM:
   132                           	callstack 0
   133  000001                     _var_TC_N1:
   134                           	callstack 0
   135  000001                     	ds	2
   136  000003                     _var_Counter_mod65536:
   137                           	callstack 0
   138  000003                     	ds	2
   139  000005                     _var_Timer_flag:
   140                           	callstack 0
   141  000005                     	ds	1
   142  000006                     _var_Trigger_flag:
   143                           	callstack 0
   144  000006                     	ds	1
   145  000007                     _var_CLK_flag:
   146                           	callstack 0
   147  000007                     	ds	1
   148  000008                     _var_Timer_out_pre:
   149                           	callstack 0
   150  000008                     	ds	1
   151  000009                     _var_Timer_out:
   152                           	callstack 0
   153  000009                     	ds	1
   154  00000A                     _var_RT:
   155                           	callstack 0
   156  00000A                     	ds	1
   157                           
   158                           	psect	dataCOMRAM
   159  00000B                     __pdataCOMRAM:
   160                           	callstack 0
   161  00000B                     _current_state:
   162                           	callstack 0
   163  00000B                     	ds	1
   164                           
   165                           	psect	cstackCOMRAM
   166  00000C                     __pcstackCOMRAM:
   167                           	callstack 0
   168  00000C                     state_logic@error:
   169                           	callstack 0
   170  00000C                     output_logic@error:
   171                           	callstack 0
   172  00000C                     write_outputs@var_buf:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x0
   176  00000C                     	ds	1
   177  00000D                     
   178                           ; 1 bytes @ 0x1
   179 ;;
   180 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   181 ;;
   182 ;; *************** function _main *****************
   183 ;; Defined at:
   184 ;;		line 99 in file "Timer.c"
   185 ;; Parameters:    Size  Location     Type
   186 ;;		None
   187 ;; Auto vars:     Size  Location     Type
   188 ;;		None
   189 ;; Return value:  Size  Location     Type
   190 ;;                  1    wreg      void 
   191 ;; Registers used:
   192 ;;		wreg, status,2, status,0, cstack
   193 ;; Tracked objects:
   194 ;;		On entry : 0/0
   195 ;;		On exit  : 0/0
   196 ;;		Unchanged: 0/0
   197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   198 ;;      Params:         0       0       0       0       0       0       0
   199 ;;      Locals:         0       0       0       0       0       0       0
   200 ;;      Temps:          0       0       0       0       0       0       0
   201 ;;      Totals:         0       0       0       0       0       0       0
   202 ;;Total ram usage:        0 bytes
   203 ;; Hardware stack levels required when called: 3
   204 ;; This function calls:
   205 ;;		_datapath
   206 ;;		_init_system
   207 ;;		_output_logic
   208 ;;		_state_logic
   209 ;;		_write_outputs
   210 ;; This function is called by:
   211 ;;		Startup code after reset
   212 ;; This function uses a non-reentrant model
   213 ;;
   214                           
   215                           	psect	text0
   216  000192                     __ptext0:
   217                           	callstack 0
   218  000192                     _main:
   219                           	callstack 28
   220  000192                     
   221                           ;Timer.c: 100: init_system ();
   222  000192  EC9D  F000         	call	_init_system	;wreg free
   223  000196                     l969:
   224                           
   225                           ;Timer.c: 102: if (state_logic()) break;
   226  000196  EC09  F000         	call	_state_logic	;wreg free
   227  00019A  0900               	iorlw	0
   228  00019C  B4D8               	btfsc	status,2,c
   229  00019E  EFD3  F000         	goto	u71
   230  0001A2  EFD5  F000         	goto	u70
   231  0001A6                     u71:
   232  0001A6  EFD7  F000         	goto	l973
   233  0001AA                     u70:
   234  0001AA  EFE9  F000         	goto	l88
   235  0001AE                     l973:
   236                           
   237                           ;Timer.c: 103: if (output_logic()) break;
   238  0001AE  EC5E  F000         	call	_output_logic	;wreg free
   239  0001B2  0900               	iorlw	0
   240  0001B4  B4D8               	btfsc	status,2,c
   241  0001B6  EFDF  F000         	goto	u81
   242  0001BA  EFE1  F000         	goto	u80
   243  0001BE                     u81:
   244  0001BE  EFE3  F000         	goto	l977
   245  0001C2                     u80:
   246  0001C2  EFE9  F000         	goto	l88
   247  0001C6                     l977:
   248                           
   249                           ;Timer.c: 104: datapath ();
   250  0001C6  ECEE  F000         	call	_datapath	;wreg free
   251                           
   252                           ;Timer.c: 105: write_outputs();
   253  0001CA  EC3D  F001         	call	_write_outputs	;wreg free
   254  0001CE  EFCB  F000         	goto	l969
   255  0001D2                     l88:
   256                           
   257                           ;Timer.c: 108: __nop();
   258  0001D2  F000               	nop	
   259  0001D4  EFE9  F000         	goto	l88
   260  0001D8  EF07  F000         	goto	start
   261  0001DC                     __end_of_main:
   262                           	callstack 0
   263                           
   264 ;; *************** function _write_outputs *****************
   265 ;; Defined at:
   266 ;;		line 405 in file "Timer.c"
   267 ;; Parameters:    Size  Location     Type
   268 ;;		None
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  var_buf         1    0[COMRAM] unsigned char 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, status,2, status,0
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   280 ;;      Params:         0       0       0       0       0       0       0
   281 ;;      Locals:         1       0       0       0       0       0       0
   282 ;;      Temps:          0       0       0       0       0       0       0
   283 ;;      Totals:         1       0       0       0       0       0       0
   284 ;;Total ram usage:        1 bytes
   285 ;; Hardware stack levels used: 1
   286 ;; Hardware stack levels required when called: 1
   287 ;; This function calls:
   288 ;;		Nothing
   289 ;; This function is called by:
   290 ;;		_main
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text1
   295  00027A                     __ptext1:
   296                           	callstack 0
   297  00027A                     _write_outputs:
   298                           	callstack 29
   299  00027A                     
   300                           ;Timer.c: 406: char var_buf;;Timer.c: 412: var_buf = PORTB & 0b11110111;
   301  00027A  5081               	movf	129,w,c	;volatile
   302  00027C  0BF7               	andlw	247
   303  00027E  6E0C               	movwf	write_outputs@var_buf^0,c
   304                           
   305                           ;Timer.c: 415: PORTB = var_buf | (var_Timer_out << 3);
   306  000280  3809               	swapf	_var_Timer_out^0,w,c
   307  000282  42E8               	rrncf	wreg,f,c
   308  000284  0BF8               	andlw	248
   309  000286  100C               	iorwf	write_outputs@var_buf^0,w,c
   310  000288  6E81               	movwf	129,c	;volatile
   311  00028A                     
   312                           ;Timer.c: 416: var_Timer_out_pre = var_Timer_out;
   313  00028A  C009  F008         	movff	_var_Timer_out,_var_Timer_out_pre
   314  00028E  0012               	return		;funcret
   315  000290                     __end_of_write_outputs:
   316                           	callstack 0
   317                           
   318 ;; *************** function _state_logic *****************
   319 ;; Defined at:
   320 ;;		line 271 in file "Timer.c"
   321 ;; Parameters:    Size  Location     Type
   322 ;;		None
   323 ;; Auto vars:     Size  Location     Type
   324 ;;  error           1    0[COMRAM] unsigned char 
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      unsigned char 
   327 ;; Registers used:
   328 ;;		wreg, status,2, status,0, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   334 ;;      Params:         0       0       0       0       0       0       0
   335 ;;      Locals:         1       0       0       0       0       0       0
   336 ;;      Temps:          0       0       0       0       0       0       0
   337 ;;      Totals:         1       0       0       0       0       0       0
   338 ;;Total ram usage:        1 bytes
   339 ;; Hardware stack levels used: 1
   340 ;; Hardware stack levels required when called: 2
   341 ;; This function calls:
   342 ;;		_read_inputs
   343 ;; This function is called by:
   344 ;;		_main
   345 ;; This function uses a non-reentrant model
   346 ;;
   347                           
   348                           	psect	text2
   349  000012                     __ptext2:
   350                           	callstack 0
   351  000012                     _state_logic:
   352                           	callstack 28
   353  000012                     
   354                           ;Timer.c: 272: char error = 0;
   355  000012  0E00               	movlw	0
   356  000014  6E0C               	movwf	state_logic@error^0,c
   357  000016                     
   358                           ;Timer.c: 273: read_inputs ();
   359  000016  EC48  F001         	call	_read_inputs	;wreg free
   360                           
   361                           ;Timer.c: 275: switch (current_state) {
   362  00001A  EF49  F000         	goto	l927
   363  00001E                     l903:
   364                           
   365                           ;Timer.c: 277: if (var_Trigger_flag == 1) {
   366  00001E  0406               	decf	_var_Trigger_flag^0,w,c
   367  000020  A4D8               	btfss	status,2,c
   368  000022  EF15  F000         	goto	u11
   369  000026  EF17  F000         	goto	u10
   370  00002A                     u11:
   371  00002A  EF1D  F000         	goto	l907
   372  00002E                     u10:
   373  00002E                     l905:
   374                           
   375                           ;Timer.c: 278: current_state = 'B';
   376  00002E  0E42               	movlw	66
   377  000030  6E0B               	movwf	_current_state^0,c
   378                           
   379                           ;Timer.c: 279: var_Trigger_flag = 0;
   380  000032  0E00               	movlw	0
   381  000034  6E06               	movwf	_var_Trigger_flag^0,c
   382                           
   383                           ;Timer.c: 282: } else
   384  000036  EF5C  F000         	goto	l929
   385  00003A                     l907:
   386                           
   387                           ;Timer.c: 283: current_state = 'A';
   388  00003A  0E41               	movlw	65
   389  00003C  6E0B               	movwf	_current_state^0,c
   390  00003E  EF5C  F000         	goto	l929
   391  000042                     l909:
   392                           
   393                           ;Timer.c: 287: current_state = 'C';
   394  000042  0E43               	movlw	67
   395  000044  6E0B               	movwf	_current_state^0,c
   396                           
   397                           ;Timer.c: 288: break;
   398  000046  EF5C  F000         	goto	l929
   399  00004A                     l911:
   400                           
   401                           ;Timer.c: 292: if (var_Timer_flag == 1) {
   402  00004A  0405               	decf	_var_Timer_flag^0,w,c
   403  00004C  A4D8               	btfss	status,2,c
   404  00004E  EF2B  F000         	goto	u21
   405  000052  EF2D  F000         	goto	u20
   406  000056                     u21:
   407  000056  EF33  F000         	goto	l915
   408  00005A                     u20:
   409  00005A                     
   410                           ;Timer.c: 293: current_state = 'D';
   411  00005A  0E44               	movlw	68
   412  00005C  6E0B               	movwf	_current_state^0,c
   413                           
   414                           ;Timer.c: 294: var_Timer_flag = 0;
   415  00005E  0E00               	movlw	0
   416  000060  6E05               	movwf	_var_Timer_flag^0,c
   417                           
   418                           ;Timer.c: 295: }
   419  000062  EF5C  F000         	goto	l929
   420  000066                     l915:
   421                           
   422                           ;Timer.c: 297: else if (var_Trigger_flag == 1 && var_RT == 1) {
   423  000066  0406               	decf	_var_Trigger_flag^0,w,c
   424  000068  A4D8               	btfss	status,2,c
   425  00006A  EF39  F000         	goto	u31
   426  00006E  EF3B  F000         	goto	u30
   427  000072                     u31:
   428  000072  EF21  F000         	goto	l909
   429  000076                     u30:
   430  000076  040A               	decf	_var_RT^0,w,c
   431  000078  A4D8               	btfss	status,2,c
   432  00007A  EF41  F000         	goto	u41
   433  00007E  EF43  F000         	goto	u40
   434  000082                     u41:
   435  000082  EF21  F000         	goto	l909
   436  000086                     u40:
   437  000086  EF17  F000         	goto	l905
   438  00008A                     l925:
   439                           
   440                           ;Timer.c: 310: error = 1;
   441  00008A  0E01               	movlw	1
   442  00008C  6E0C               	movwf	state_logic@error^0,c
   443                           
   444                           ;Timer.c: 311: }
   445  00008E  EF5C  F000         	goto	l929
   446  000092                     l927:
   447  000092  500B               	movf	_current_state^0,w,c
   448                           
   449                           ; Switch size 1, requested type "simple"
   450                           ; Number of cases is 4, Range of values is 65 to 68
   451                           ; switch strategies available:
   452                           ; Name         Instructions Cycles
   453                           ; simple_byte           13     7 (average)
   454                           ;	Chosen strategy is simple_byte
   455  000094  0A41               	xorlw	65	; case 65
   456  000096  B4D8               	btfsc	status,2,c
   457  000098  EF0F  F000         	goto	l903
   458  00009C  0A03               	xorlw	3	; case 66
   459  00009E  B4D8               	btfsc	status,2,c
   460  0000A0  EF21  F000         	goto	l909
   461  0000A4  0A01               	xorlw	1	; case 67
   462  0000A6  B4D8               	btfsc	status,2,c
   463  0000A8  EF25  F000         	goto	l911
   464  0000AC  0A07               	xorlw	7	; case 68
   465  0000AE  B4D8               	btfsc	status,2,c
   466  0000B0  EF1D  F000         	goto	l907
   467  0000B4  EF45  F000         	goto	l925
   468  0000B8                     l929:
   469                           
   470                           ;Timer.c: 312: return (error);
   471  0000B8  500C               	movf	state_logic@error^0,w,c
   472  0000BA  0012               	return		;funcret
   473  0000BC                     __end_of_state_logic:
   474                           	callstack 0
   475                           
   476 ;; *************** function _read_inputs *****************
   477 ;; Defined at:
   478 ;;		line 395 in file "Timer.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0
   487 ;; Tracked objects:
   488 ;;		On entry : 0/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   492 ;;      Params:         0       0       0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0       0       0
   494 ;;      Temps:          0       0       0       0       0       0       0
   495 ;;      Totals:         0       0       0       0       0       0       0
   496 ;;Total ram usage:        0 bytes
   497 ;; Hardware stack levels used: 1
   498 ;; Hardware stack levels required when called: 1
   499 ;; This function calls:
   500 ;;		Nothing
   501 ;; This function is called by:
   502 ;;		_state_logic
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text3
   507  000290                     __ptext3:
   508                           	callstack 0
   509  000290                     _read_inputs:
   510                           	callstack 28
   511  000290                     
   512                           ;Timer.c: 397: var_RT = (PORTA & 0b00010000)>>4;
   513  000290  3880               	swapf	128,w,c	;volatile
   514  000292  0B0F               	andlw	15
   515  000294  0B01               	andlw	1
   516  000296  6E0A               	movwf	_var_RT^0,c
   517  000298  0012               	return		;funcret
   518  00029A                     __end_of_read_inputs:
   519                           	callstack 0
   520                           
   521 ;; *************** function _output_logic *****************
   522 ;; Defined at:
   523 ;;		line 317 in file "Timer.c"
   524 ;; Parameters:    Size  Location     Type
   525 ;;		None
   526 ;; Auto vars:     Size  Location     Type
   527 ;;  error           1    0[COMRAM] unsigned char 
   528 ;;  var_buf         1    0        unsigned char 
   529 ;; Return value:  Size  Location     Type
   530 ;;                  1    wreg      unsigned char 
   531 ;; Registers used:
   532 ;;		wreg, status,2, status,0
   533 ;; Tracked objects:
   534 ;;		On entry : 0/0
   535 ;;		On exit  : 0/0
   536 ;;		Unchanged: 0/0
   537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   538 ;;      Params:         0       0       0       0       0       0       0
   539 ;;      Locals:         1       0       0       0       0       0       0
   540 ;;      Temps:          0       0       0       0       0       0       0
   541 ;;      Totals:         1       0       0       0       0       0       0
   542 ;;Total ram usage:        1 bytes
   543 ;; Hardware stack levels used: 1
   544 ;; Hardware stack levels required when called: 1
   545 ;; This function calls:
   546 ;;		Nothing
   547 ;; This function is called by:
   548 ;;		_main
   549 ;; This function uses a non-reentrant model
   550 ;;
   551                           
   552                           	psect	text4
   553  0000BC                     __ptext4:
   554                           	callstack 0
   555  0000BC                     _output_logic:
   556                           	callstack 29
   557  0000BC                     
   558                           ;Timer.c: 318: char error = 0;
   559  0000BC  0E00               	movlw	0
   560  0000BE  6E0C               	movwf	output_logic@error^0,c
   561                           
   562                           ;Timer.c: 319: char var_buf;;Timer.c: 320: switch (current_state) {
   563  0000C0  EF88  F000         	goto	l949
   564  0000C4                     l935:
   565                           
   566                           ;Timer.c: 322: var_Timer_out = 0;
   567  0000C4  0E00               	movlw	0
   568  0000C6  6E09               	movwf	_var_Timer_out^0,c
   569                           
   570                           ;Timer.c: 323: break;
   571  0000C8  EF9B  F000         	goto	l951
   572  0000CC                     l937:
   573                           
   574                           ;Timer.c: 326: var_Timer_out = 1;
   575  0000CC  0E01               	movlw	1
   576  0000CE  6E09               	movwf	_var_Timer_out^0,c
   577                           
   578                           ;Timer.c: 327: var_TC_N1 = 924;
   579  0000D0  0E03               	movlw	3
   580  0000D2  6E02               	movwf	(_var_TC_N1+1)^0,c
   581  0000D4  0E9C               	movlw	156
   582  0000D6  6E01               	movwf	_var_TC_N1^0,c
   583                           
   584                           ;Timer.c: 328: var_Counter_mod65536 = 0;
   585  0000D8  0E00               	movlw	0
   586  0000DA  6E04               	movwf	(_var_Counter_mod65536+1)^0,c
   587  0000DC  0E00               	movlw	0
   588  0000DE  6E03               	movwf	_var_Counter_mod65536^0,c
   589  0000E0                     
   590                           ;Timer.c: 330: INT1IE = 1;
   591  0000E0  86F0               	bsf	4080,3,c	;volatile
   592                           
   593                           ;Timer.c: 331: var_Timer_flag = 0;
   594  0000E2  0E00               	movlw	0
   595  0000E4  6E05               	movwf	_var_Timer_flag^0,c
   596                           
   597                           ;Timer.c: 333: break;
   598  0000E6  EF9B  F000         	goto	l951
   599  0000EA                     l941:
   600                           
   601                           ;Timer.c: 336: var_Timer_out = 1;
   602  0000EA  0E01               	movlw	1
   603  0000EC  6E09               	movwf	_var_Timer_out^0,c
   604                           
   605                           ;Timer.c: 338: break;
   606  0000EE  EF9B  F000         	goto	l951
   607  0000F2                     l943:
   608                           
   609                           ;Timer.c: 341: var_Timer_out = 0;
   610  0000F2  0E00               	movlw	0
   611  0000F4  6E09               	movwf	_var_Timer_out^0,c
   612                           
   613                           ;Timer.c: 342: var_Counter_mod65536 = 0;
   614  0000F6  0E00               	movlw	0
   615  0000F8  6E04               	movwf	(_var_Counter_mod65536+1)^0,c
   616  0000FA  0E00               	movlw	0
   617  0000FC  6E03               	movwf	_var_Counter_mod65536^0,c
   618  0000FE                     
   619                           ;Timer.c: 343: INT1IE = 0;
   620  0000FE  96F0               	bcf	4080,3,c	;volatile
   621                           
   622                           ;Timer.c: 344: var_Timer_flag = 0;
   623  000100  0E00               	movlw	0
   624  000102  6E05               	movwf	_var_Timer_flag^0,c
   625                           
   626                           ;Timer.c: 345: break;
   627  000104  EF9B  F000         	goto	l951
   628  000108                     l947:
   629                           
   630                           ;Timer.c: 348: error = 1;
   631  000108  0E01               	movlw	1
   632  00010A  6E0C               	movwf	output_logic@error^0,c
   633                           
   634                           ;Timer.c: 349: }
   635  00010C  EF9B  F000         	goto	l951
   636  000110                     l949:
   637  000110  500B               	movf	_current_state^0,w,c
   638                           
   639                           ; Switch size 1, requested type "simple"
   640                           ; Number of cases is 4, Range of values is 65 to 68
   641                           ; switch strategies available:
   642                           ; Name         Instructions Cycles
   643                           ; simple_byte           13     7 (average)
   644                           ;	Chosen strategy is simple_byte
   645  000112  0A41               	xorlw	65	; case 65
   646  000114  B4D8               	btfsc	status,2,c
   647  000116  EF62  F000         	goto	l935
   648  00011A  0A03               	xorlw	3	; case 66
   649  00011C  B4D8               	btfsc	status,2,c
   650  00011E  EF66  F000         	goto	l937
   651  000122  0A01               	xorlw	1	; case 67
   652  000124  B4D8               	btfsc	status,2,c
   653  000126  EF75  F000         	goto	l941
   654  00012A  0A07               	xorlw	7	; case 68
   655  00012C  B4D8               	btfsc	status,2,c
   656  00012E  EF79  F000         	goto	l943
   657  000132  EF84  F000         	goto	l947
   658  000136                     l951:
   659                           
   660                           ;Timer.c: 350: return (error);
   661  000136  500C               	movf	output_logic@error^0,w,c
   662  000138  0012               	return		;funcret
   663  00013A                     __end_of_output_logic:
   664                           	callstack 0
   665                           
   666 ;; *************** function _init_system *****************
   667 ;; Defined at:
   668 ;;		line 121 in file "Timer.c"
   669 ;; Parameters:    Size  Location     Type
   670 ;;		None
   671 ;; Auto vars:     Size  Location     Type
   672 ;;		None
   673 ;; Return value:  Size  Location     Type
   674 ;;                  1    wreg      void 
   675 ;; Registers used:
   676 ;;		wreg, status,2
   677 ;; Tracked objects:
   678 ;;		On entry : 0/0
   679 ;;		On exit  : 0/0
   680 ;;		Unchanged: 0/0
   681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   682 ;;      Params:         0       0       0       0       0       0       0
   683 ;;      Locals:         0       0       0       0       0       0       0
   684 ;;      Temps:          0       0       0       0       0       0       0
   685 ;;      Totals:         0       0       0       0       0       0       0
   686 ;;Total ram usage:        0 bytes
   687 ;; Hardware stack levels used: 1
   688 ;; Hardware stack levels required when called: 1
   689 ;; This function calls:
   690 ;;		Nothing
   691 ;; This function is called by:
   692 ;;		_main
   693 ;; This function uses a non-reentrant model
   694 ;;
   695                           
   696                           	psect	text5
   697  00013A                     __ptext5:
   698                           	callstack 0
   699  00013A                     _init_system:
   700                           	callstack 29
   701  00013A                     
   702                           ;Timer.c: 229: PORTA = 0x00;
   703  00013A  0E00               	movlw	0
   704  00013C  6E80               	movwf	128,c	;volatile
   705                           
   706                           ;Timer.c: 230: LATA = 0x00;
   707  00013E  0E00               	movlw	0
   708  000140  6E89               	movwf	137,c	;volatile
   709                           
   710                           ;Timer.c: 231: ADCON1 = 0x0F;
   711  000142  0E0F               	movlw	15
   712  000144  6EC1               	movwf	193,c	;volatile
   713                           
   714                           ;Timer.c: 232: TRISA = 0b00010000;
   715  000146  0E10               	movlw	16
   716  000148  6E92               	movwf	146,c	;volatile
   717                           
   718                           ;Timer.c: 234: PORTB = 0x00;
   719  00014A  0E00               	movlw	0
   720  00014C  6E81               	movwf	129,c	;volatile
   721                           
   722                           ;Timer.c: 235: LATB = 0x00;
   723  00014E  0E00               	movlw	0
   724  000150  6E8A               	movwf	138,c	;volatile
   725                           
   726                           ;Timer.c: 236: TRISB = 0b00000011;
   727  000152  0E03               	movlw	3
   728  000154  6E93               	movwf	147,c	;volatile
   729                           
   730                           ;Timer.c: 239: PORTC = 0x00;
   731  000156  0E00               	movlw	0
   732  000158  6E82               	movwf	130,c	;volatile
   733                           
   734                           ;Timer.c: 240: LATC = 0x00;
   735  00015A  0E00               	movlw	0
   736  00015C  6E8B               	movwf	139,c	;volatile
   737                           
   738                           ;Timer.c: 241: TRISC = 0b00000000;
   739  00015E  0E00               	movlw	0
   740  000160  6E94               	movwf	148,c	;volatile
   741                           
   742                           ;Timer.c: 243: PORTD = 0x00;
   743  000162  0E00               	movlw	0
   744  000164  6E83               	movwf	131,c	;volatile
   745                           
   746                           ;Timer.c: 244: LATD = 0x00;
   747  000166  0E00               	movlw	0
   748  000168  6E8C               	movwf	140,c	;volatile
   749                           
   750                           ;Timer.c: 245: TRISD = 0x00;
   751  00016A  0E00               	movlw	0
   752  00016C  6E95               	movwf	149,c	;volatile
   753                           
   754                           ;Timer.c: 247: PORTE = 0x00;
   755  00016E  0E00               	movlw	0
   756  000170  6E84               	movwf	132,c	;volatile
   757                           
   758                           ;Timer.c: 248: LATE = 0x00;
   759  000172  0E00               	movlw	0
   760  000174  6E8D               	movwf	141,c	;volatile
   761                           
   762                           ;Timer.c: 249: TRISE = 0b00000000;
   763  000176  0E00               	movlw	0
   764  000178  6E96               	movwf	150,c	;volatile
   765  00017A                     
   766                           ;Timer.c: 252: INTEDG0 = 0;
   767  00017A  9CF1               	bcf	4081,6,c	;volatile
   768  00017C                     
   769                           ;Timer.c: 254: INT0IE = 1;
   770  00017C  88F2               	bsf	4082,4,c	;volatile
   771  00017E                     
   772                           ;Timer.c: 257: INTEDG1 = 1;
   773  00017E  8AF1               	bsf	4081,5,c	;volatile
   774  000180                     
   775                           ;Timer.c: 258: INT1IE = 0;
   776  000180  96F0               	bcf	4080,3,c	;volatile
   777  000182                     
   778                           ;Timer.c: 260: GIE = 1;
   779  000182  8EF2               	bsf	4082,7,c	;volatile
   780                           
   781                           ;Timer.c: 263: var_Timer_out = 0;
   782  000184  0E00               	movlw	0
   783  000186  6E09               	movwf	_var_Timer_out^0,c
   784                           
   785                           ;Timer.c: 264: var_Trigger_flag = 0;
   786  000188  0E00               	movlw	0
   787  00018A  6E06               	movwf	_var_Trigger_flag^0,c
   788                           
   789                           ;Timer.c: 265: var_Timer_flag = 0;
   790  00018C  0E00               	movlw	0
   791  00018E  6E05               	movwf	_var_Timer_flag^0,c
   792  000190  0012               	return		;funcret
   793  000192                     __end_of_init_system:
   794                           	callstack 0
   795                           
   796 ;; *************** function _datapath *****************
   797 ;; Defined at:
   798 ;;		line 375 in file "Timer.c"
   799 ;; Parameters:    Size  Location     Type
   800 ;;		None
   801 ;; Auto vars:     Size  Location     Type
   802 ;;		None
   803 ;; Return value:  Size  Location     Type
   804 ;;                  1    wreg      void 
   805 ;; Registers used:
   806 ;;		wreg, status,2, status,0
   807 ;; Tracked objects:
   808 ;;		On entry : 0/0
   809 ;;		On exit  : 0/0
   810 ;;		Unchanged: 0/0
   811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   812 ;;      Params:         0       0       0       0       0       0       0
   813 ;;      Locals:         0       0       0       0       0       0       0
   814 ;;      Temps:          0       0       0       0       0       0       0
   815 ;;      Totals:         0       0       0       0       0       0       0
   816 ;;Total ram usage:        0 bytes
   817 ;; Hardware stack levels used: 1
   818 ;; Hardware stack levels required when called: 1
   819 ;; This function calls:
   820 ;;		Nothing
   821 ;; This function is called by:
   822 ;;		_main
   823 ;; This function uses a non-reentrant model
   824 ;;
   825                           
   826                           	psect	text6
   827  0001DC                     __ptext6:
   828                           	callstack 0
   829  0001DC                     _datapath:
   830                           	callstack 29
   831  0001DC                     
   832                           ;Timer.c: 376: if (var_CLK_flag == 1){
   833  0001DC  0407               	decf	_var_CLK_flag^0,w,c
   834  0001DE  A4D8               	btfss	status,2,c
   835  0001E0  EFF4  F000         	goto	u51
   836  0001E4  EFF6  F000         	goto	u50
   837  0001E8                     u51:
   838  0001E8  EF0D  F001         	goto	l131
   839  0001EC                     u50:
   840  0001EC                     
   841                           ;Timer.c: 377: if (var_Counter_mod65536 < var_TC_N1) {
   842  0001EC  5001               	movf	_var_TC_N1^0,w,c
   843  0001EE  5C03               	subwf	_var_Counter_mod65536^0,w,c
   844  0001F0  5002               	movf	(_var_TC_N1+1)^0,w,c
   845  0001F2  5804               	subwfb	(_var_Counter_mod65536+1)^0,w,c
   846  0001F4  B0D8               	btfsc	status,0,c
   847  0001F6  EFFF  F000         	goto	u61
   848  0001FA  EF01  F001         	goto	u60
   849  0001FE                     u61:
   850  0001FE  EF05  F001         	goto	l961
   851  000202                     u60:
   852  000202                     
   853                           ;Timer.c: 378: var_Counter_mod65536++;
   854  000202  4A03               	infsnz	_var_Counter_mod65536^0,f,c
   855  000204  2A04               	incf	(_var_Counter_mod65536+1)^0,f,c
   856                           
   857                           ;Timer.c: 379: } else {
   858  000206  EF0B  F001         	goto	l130
   859  00020A                     l961:
   860                           
   861                           ;Timer.c: 381: var_Timer_flag = 1;
   862  00020A  0E01               	movlw	1
   863  00020C  6E05               	movwf	_var_Timer_flag^0,c
   864                           
   865                           ;Timer.c: 382: var_Counter_mod65536 = 0;
   866  00020E  0E00               	movlw	0
   867  000210  6E04               	movwf	(_var_Counter_mod65536+1)^0,c
   868  000212  0E00               	movlw	0
   869  000214  6E03               	movwf	_var_Counter_mod65536^0,c
   870  000216                     l130:
   871                           
   872                           ;Timer.c: 383: };Timer.c: 385: var_CLK_flag =0;
   873  000216  0E00               	movlw	0
   874  000218  6E07               	movwf	_var_CLK_flag^0,c
   875  00021A                     l131:
   876  00021A  0012               	return		;funcret
   877  00021C                     __end_of_datapath:
   878                           	callstack 0
   879                           
   880 ;; *************** function _ISR *****************
   881 ;; Defined at:
   882 ;;		line 355 in file "Timer.c"
   883 ;; Parameters:    Size  Location     Type
   884 ;;		None
   885 ;; Auto vars:     Size  Location     Type
   886 ;;		None
   887 ;; Return value:  Size  Location     Type
   888 ;;                  1    wreg      void 
   889 ;; Registers used:
   890 ;;		wreg, status,2
   891 ;; Tracked objects:
   892 ;;		On entry : 0/0
   893 ;;		On exit  : 0/0
   894 ;;		Unchanged: 0/0
   895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   896 ;;      Params:         0       0       0       0       0       0       0
   897 ;;      Locals:         0       0       0       0       0       0       0
   898 ;;      Temps:          0       0       0       0       0       0       0
   899 ;;      Totals:         0       0       0       0       0       0       0
   900 ;;Total ram usage:        0 bytes
   901 ;; Hardware stack levels used: 1
   902 ;; This function calls:
   903 ;;		Nothing
   904 ;; This function is called by:
   905 ;;		Interrupt level 2
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           	psect	intcode
   910  000008                     __pintcode:
   911                           	callstack 0
   912  000008                     _ISR:
   913                           	callstack 28
   914                           
   915                           ;incstack = 0
   916  000008  820D               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   917  00000A  ED0E  F001         	call	int_func,f	;refresh shadow registers
   918                           
   919                           	psect	intcode_body
   920  00021C                     __pintcode_body:
   921                           	callstack 28
   922  00021C                     int_func:
   923                           	callstack 28
   924  00021C  0006               	pop		; remove dummy address from shadow register refresh
   925  00021E                     
   926                           ;Timer.c: 356: GIE = 0;
   927  00021E  9EF2               	bcf	4082,7,c	;volatile
   928                           
   929                           ;Timer.c: 357: if (INT1IF == 1) {
   930  000220  A0F0               	btfss	4080,0,c	;volatile
   931  000222  EF15  F001         	goto	i2u9_41
   932  000226  EF17  F001         	goto	i2u9_40
   933  00022A                     i2u9_41:
   934  00022A  EF1A  F001         	goto	i2l985
   935  00022E                     i2u9_40:
   936  00022E                     
   937                           ;Timer.c: 358: var_CLK_flag = 1;
   938  00022E  0E01               	movlw	1
   939  000230  6E07               	movwf	_var_CLK_flag^0,c
   940  000232                     
   941                           ;Timer.c: 360: INT1IF = 0;
   942  000232  90F0               	bcf	4080,0,c	;volatile
   943  000234                     i2l985:
   944                           
   945                           ;Timer.c: 361: };Timer.c: 362: if (INT0IF == 1) {
   946  000234  A2F2               	btfss	4082,1,c	;volatile
   947  000236  EF1F  F001         	goto	i2u10_41
   948  00023A  EF21  F001         	goto	i2u10_40
   949  00023E                     i2u10_41:
   950  00023E  EF24  F001         	goto	i2l991
   951  000242                     i2u10_40:
   952  000242                     
   953                           ;Timer.c: 363: var_Trigger_flag = 1;
   954  000242  0E01               	movlw	1
   955  000244  6E06               	movwf	_var_Trigger_flag^0,c
   956  000246                     
   957                           ;Timer.c: 366: INT0IF = 0;
   958  000246  92F2               	bcf	4082,1,c	;volatile
   959  000248                     i2l991:
   960                           
   961                           ;Timer.c: 367: };Timer.c: 368: GIE = 1;
   962  000248  8EF2               	bsf	4082,7,c	;volatile
   963  00024A  920D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   964  00024C  0011               	retfie		f
   965  00024E                     __end_of_ISR:
   966                           	callstack 0
   967  0000                     
   968                           	psect	rparam
   969  0000                     
   970                           	psect	temp
   971  00000D                     btemp:
   972                           	callstack 0
   973  00000D                     	ds	1
   974  0000                     int$flags	set	btemp
   975  0000                     wtemp8	set	btemp+1
   976  0000                     ttemp5	set	btemp+1
   977  0000                     ttemp6	set	btemp+4
   978  0000                     ttemp7	set	btemp+8
   979                           
   980                           	psect	idloc
   981                           
   982                           ;Config register IDLOC0 @ 0x200000
   983                           ;	unspecified, using default values
   984  200000                     	org	2097152
   985  200000  FF                 	db	255
   986                           
   987                           ;Config register IDLOC1 @ 0x200001
   988                           ;	unspecified, using default values
   989  200001                     	org	2097153
   990  200001  FF                 	db	255
   991                           
   992                           ;Config register IDLOC2 @ 0x200002
   993                           ;	unspecified, using default values
   994  200002                     	org	2097154
   995  200002  FF                 	db	255
   996                           
   997                           ;Config register IDLOC3 @ 0x200003
   998                           ;	unspecified, using default values
   999  200003                     	org	2097155
  1000  200003  FF                 	db	255
  1001                           
  1002                           ;Config register IDLOC4 @ 0x200004
  1003                           ;	unspecified, using default values
  1004  200004                     	org	2097156
  1005  200004  FF                 	db	255
  1006                           
  1007                           ;Config register IDLOC5 @ 0x200005
  1008                           ;	unspecified, using default values
  1009  200005                     	org	2097157
  1010  200005  FF                 	db	255
  1011                           
  1012                           ;Config register IDLOC6 @ 0x200006
  1013                           ;	unspecified, using default values
  1014  200006                     	org	2097158
  1015  200006  FF                 	db	255
  1016                           
  1017                           ;Config register IDLOC7 @ 0x200007
  1018                           ;	unspecified, using default values
  1019  200007                     	org	2097159
  1020  200007  FF                 	db	255
  1021                           
  1022                           	psect	config
  1023                           
  1024                           ; Padding undefined space
  1025  300000                     	org	3145728
  1026  300000  FF                 	db	255
  1027                           
  1028                           ;Config register CONFIG1H @ 0x300001
  1029                           ;	Oscillator Selection bits
  1030                           ;	OSC = XT, XT oscillator
  1031                           ;	Fail-Safe Clock Monitor Enable bit
  1032                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1033                           ;	Internal/External Oscillator Switchover bit
  1034                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1035  300001                     	org	3145729
  1036  300001  01                 	db	1
  1037                           
  1038                           ;Config register CONFIG2L @ 0x300002
  1039                           ;	Power-up Timer Enable bit
  1040                           ;	PWRT = ON, PWRT enabled
  1041                           ;	Brown-out Reset Enable bits
  1042                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1043                           ;	Brown Out Reset Voltage bits
  1044                           ;	BORV = 3, Minimum setting
  1045  300002                     	org	3145730
  1046  300002  1E                 	db	30
  1047                           
  1048                           ;Config register CONFIG2H @ 0x300003
  1049                           ;	Watchdog Timer Enable bit
  1050                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1051                           ;	Watchdog Timer Postscale Select bits
  1052                           ;	WDTPS = 32768, 1:32768
  1053  300003                     	org	3145731
  1054  300003  1E                 	db	30
  1055                           
  1056                           ; Padding undefined space
  1057  300004                     	org	3145732
  1058  300004  FF                 	db	255
  1059                           
  1060                           ;Config register CONFIG3H @ 0x300005
  1061                           ;	CCP2 MUX bit
  1062                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1063                           ;	PORTB A/D Enable bit
  1064                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1065                           ;	Low-Power Timer1 Oscillator Enable bit
  1066                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1067                           ;	MCLR Pin Enable bit
  1068                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1069  300005                     	org	3145733
  1070  300005  81                 	db	129
  1071                           
  1072                           ;Config register CONFIG4L @ 0x300006
  1073                           ;	Stack Full/Underflow Reset Enable bit
  1074                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1075                           ;	Single-Supply ICSP Enable bit
  1076                           ;	LVP = OFF, Single-Supply ICSP disabled
  1077                           ;	Extended Instruction Set Enable bit
  1078                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1079                           ;	Background Debugger Enable bit
  1080                           ;	DEBUG = 0x1, unprogrammed default
  1081  300006                     	org	3145734
  1082  300006  81                 	db	129
  1083                           
  1084                           ; Padding undefined space
  1085  300007                     	org	3145735
  1086  300007  FF                 	db	255
  1087                           
  1088                           ;Config register CONFIG5L @ 0x300008
  1089                           ;	Code Protection bit
  1090                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1091                           ;	Code Protection bit
  1092                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1093                           ;	Code Protection bit
  1094                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1095                           ;	Code Protection bit
  1096                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1097  300008                     	org	3145736
  1098  300008  0F                 	db	15
  1099                           
  1100                           ;Config register CONFIG5H @ 0x300009
  1101                           ;	Boot Block Code Protection bit
  1102                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1103                           ;	Data EEPROM Code Protection bit
  1104                           ;	CPD = OFF, Data EEPROM not code-protected
  1105  300009                     	org	3145737
  1106  300009  C0                 	db	192
  1107                           
  1108                           ;Config register CONFIG6L @ 0x30000A
  1109                           ;	Write Protection bit
  1110                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1111                           ;	Write Protection bit
  1112                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1113                           ;	Write Protection bit
  1114                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1115                           ;	Write Protection bit
  1116                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1117  30000A                     	org	3145738
  1118  30000A  0F                 	db	15
  1119                           
  1120                           ;Config register CONFIG6H @ 0x30000B
  1121                           ;	Configuration Register Write Protection bit
  1122                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1123                           ;	Boot Block Write Protection bit
  1124                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1125                           ;	Data EEPROM Write Protection bit
  1126                           ;	WRTD = OFF, Data EEPROM not write-protected
  1127  30000B                     	org	3145739
  1128  30000B  E0                 	db	224
  1129                           
  1130                           ;Config register CONFIG7L @ 0x30000C
  1131                           ;	Table Read Protection bit
  1132                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1133                           ;	Table Read Protection bit
  1134                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1135                           ;	Table Read Protection bit
  1136                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1137                           ;	Table Read Protection bit
  1138                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1139  30000C                     	org	3145740
  1140  30000C  0F                 	db	15
  1141                           
  1142                           ;Config register CONFIG7H @ 0x30000D
  1143                           ;	Boot Block Table Read Protection bit
  1144                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1145  30000D                     	org	3145741
  1146  30000D  40                 	db	64
  1147                           tosu	equ	0xFFF
  1148                           tosh	equ	0xFFE
  1149                           tosl	equ	0xFFD
  1150                           stkptr	equ	0xFFC
  1151                           pclatu	equ	0xFFB
  1152                           pclath	equ	0xFFA
  1153                           pcl	equ	0xFF9
  1154                           tblptru	equ	0xFF8
  1155                           tblptrh	equ	0xFF7
  1156                           tblptrl	equ	0xFF6
  1157                           tablat	equ	0xFF5
  1158                           prodh	equ	0xFF4
  1159                           prodl	equ	0xFF3
  1160                           indf0	equ	0xFEF
  1161                           postinc0	equ	0xFEE
  1162                           postdec0	equ	0xFED
  1163                           preinc0	equ	0xFEC
  1164                           plusw0	equ	0xFEB
  1165                           fsr0h	equ	0xFEA
  1166                           fsr0l	equ	0xFE9
  1167                           wreg	equ	0xFE8
  1168                           indf1	equ	0xFE7
  1169                           postinc1	equ	0xFE6
  1170                           postdec1	equ	0xFE5
  1171                           preinc1	equ	0xFE4
  1172                           plusw1	equ	0xFE3
  1173                           fsr1h	equ	0xFE2
  1174                           fsr1l	equ	0xFE1
  1175                           bsr	equ	0xFE0
  1176                           indf2	equ	0xFDF
  1177                           postinc2	equ	0xFDE
  1178                           postdec2	equ	0xFDD
  1179                           preinc2	equ	0xFDC
  1180                           plusw2	equ	0xFDB
  1181                           fsr2h	equ	0xFDA
  1182                           fsr2l	equ	0xFD9
  1183                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         10
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126      1      12
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_output_logic
    _main->_state_logic
    _main->_write_outputs

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      45
                           _datapath
                        _init_system
                       _output_logic
                        _state_logic
                      _write_outputs
 ---------------------------------------------------------------------------------
 (1) _write_outputs                                        1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _state_logic                                          1     1      0      15
                                              0 COMRAM     1     1      0
                        _read_inputs
 ---------------------------------------------------------------------------------
 (2) _read_inputs                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _output_logic                                         2     2      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init_system                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _datapath                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _datapath
   _init_system
   _output_logic
   _state_logic
     _read_inputs
   _write_outputs

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E      1       C       1        9.5%
BITBIGSFRhhl        2E      0       0      17        0.0%
BITBIGSFRhlh        2A      0       0      18        0.0%
BITBIGSFRhhh         D      0       0      16        0.0%
BITBIGSFRhll         4      0       0      19        0.0%
BITBIGSFRl           4      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       C      21        0.0%
DATA                 0      0       C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Tue May 31 17:51:34 2022

                     l94 0190                       l88 01D2                       u10 002E  
                     u11 002A                       u20 005A                       u21 0056  
                     u30 0076                       u31 0072                       u40 0086  
                     u41 0082                       u50 01EC                       u51 01E8  
                     u60 0202                       u61 01FE                       u70 01AA  
                     u71 01A6                       u80 01C2                       u81 01BE  
            _state_logic 0012                      l110 00BA                      l120 0138  
                    l130 0216                      l131 021A                      l134 0298  
                    l137 028E                      l901 0016                      l911 004A  
                    l903 001E                      l913 005A                      l905 002E  
                    l915 0066                      l907 003A                      l941 00EA  
                    l933 00BC                      l925 008A                      l917 0076  
                    l909 0042                      l943 00F2                      l951 0136  
                    l935 00C4                      l927 0092                      l961 020A  
                    l945 00FE                      l937 00CC                      l929 00B8  
                    l955 01DC                      l891 017C                      l947 0108  
                    l939 00E0                      l963 027A                      l957 01EC  
                    l893 017E                      l949 0110                      l885 0290  
                    l965 028A                      l973 01AE                      l959 0202  
                    l895 0180                      l887 013A                      l967 0192  
                    l897 0182                      l889 017A                      l977 01C6  
                    l969 0196                      l899 0012                      _GIE 007F97  
                    _ISR 0008                      wreg 000FE8                     ?_ISR 000C  
                   _LATA 000F89                     _LATB 000F8A                     _LATC 000F8B  
                   _LATD 000F8C                     _LATE 000F8D                     _main 0192  
                   btemp 000D                     start 000E             ___param_bank 000000  
                  ??_ISR 000C         state_logic@error 000C                    ?_main 000C  
                  i2l125 024A                    i2l981 022E                    i2l991 0248  
                  i2l983 0232                    i2l985 0234                    i2l987 0242  
                  i2l979 021E                    i2l989 0246                    _PORTA 000F80  
                  _PORTB 000F81                    _PORTC 000F82                    _PORTD 000F83  
                  _PORTE 000F84                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95                    _TRISE 000F96  
           ?_init_system 000C             ?_read_inputs 000C             _output_logic 00BC  
                  tablat 000FF5                    ttemp5 000E                    ttemp6 0011  
                  ttemp7 0015                    status 000FD8                    wtemp8 000E  
        __initialization 024E             __end_of_main 01DC                   ??_main 000D  
          __activetblptr 000002                   _ADCON1 000FC1                   _INT0IE 007F94  
                 _INT0IF 007F91                   _INT1IE 007F83                   _INT1IF 007F80  
                 i2u9_40 022E                   i2u9_41 022A         __end_of_datapath 021C  
                 clear_0 0266                   _var_RT 000A                   isa$std 000001  
           __pdataCOMRAM 000B                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 026C  
          ___rparam_used 000001           __pcstackCOMRAM 000C             ?_state_logic 000C  
          _current_state 000B           _var_Timer_flag 0005                  _INTEDG0 007F8E  
                _INTEDG1 007F8D     write_outputs@var_buf 000C                ?_datapath 000C  
                i2u10_40 0242                  i2u10_41 023E                  __Hparam 0000  
                __Lparam 0000            _write_outputs 027A                  __pcinit 024E  
                __ramtop 0600                  __ptext0 0192                  __ptext1 027A  
                __ptext2 0012                  __ptext3 0290                  __ptext4 00BC  
                __ptext5 013A                  __ptext6 01DC               ??_datapath 000C  
         __pintcode_body 021C     end_of_initialization 026C            __Lmediumconst 0000  
                int_func 021C           ?_write_outputs 000C                  postinc0 000FEE  
       _var_Trigger_flag 0006            __pidataCOMRAM 029A      start_initialization 024E  
            __end_of_ISR 024E          ??_write_outputs 000C              __pbssCOMRAM 0001  
          ??_init_system 000C            ??_read_inputs 000C            ?_output_logic 000C  
              __pintcode 0008            _var_Timer_out 0009           ??_output_logic 000C  
    __end_of_init_system 0192      __end_of_read_inputs 029A                _var_TC_N1 0001  
           _var_CLK_flag 0007     _var_Counter_mod65536 0003                 __Hrparam 0000  
               __Lrparam 0000            ??_state_logic 000C        _var_Timer_out_pre 0008  
               _datapath 01DC              _init_system 013A              _read_inputs 0290  
   __end_of_output_logic 013A                 isa$xinst 000000                 int$flags 000D  
    __end_of_state_logic 00BC                 intlevel2 0000    __end_of_write_outputs 0290  
      output_logic@error 000C  
